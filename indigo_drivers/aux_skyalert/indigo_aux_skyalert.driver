// Copyright (c) 2021-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Interactive Astronomy SkyAlert driver definition

driver skyalert {
	label = "Interactive Astronomy SkyAlert";
	author = "Peter Polakovic <peter.polakovic@cloudmakers.eu>";
	copyright = "Copyright (c) 2021-2025 CloudMakers, s. r. o.";
	version = 4;
	serial;
	data {
		char response[32];
	}
	code {
		static double skyalert_read_value(indigo_device *device) {
			if (indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\r", "\r", INDIGO_DELAY(1))) {
				return indigo_atod(PRIVATE_DATA->response);
			}
			return -1;
		}

		static bool skyalert_read_record(indigo_device *device) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				result = indigo_uni_printf(PRIVATE_DATA->handle, "send\r");
			}
			if (result > 0) {
				result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\r", "\r", INDIGO_DELAY(1));
			}
			if (result && !strcmp(PRIVATE_DATA->response, "Data")) {
				AUX_WEATHER_TEMPERATURE_ITEM->number.value = skyalert_read_value(device);
				AUX_WEATHER_SKY_TEMPERATURE_ITEM->number.value = skyalert_read_value(device);
				AUX_WEATHER_RAIN_ITEM->number.value = skyalert_read_value(device);
				AUX_INFO_SKY_BRIGHTNESS_ITEM->number.value = skyalert_read_value(device);
				AUX_WEATHER_HUMIDITY_ITEM->number.value = skyalert_read_value(device);
				AUX_WEATHER_WIND_SPEED_ITEM->number.value = skyalert_read_value(device);
				AUX_INFO_POWER_ITEM->number.value = skyalert_read_value(device);
				if (indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\r", "\r", INDIGO_DELAY(1))) {
					INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, PRIVATE_DATA->response);
				}
				AUX_WEATHER_PRESSURE_ITEM->number.value = skyalert_read_value(device);
				return true;
			} else {
				AUX_WEATHER_PROPERTY->state = INDIGO_ALERT_STATE;
				AUX_INFO_PROPERTY->state = INDIGO_ALERT_STATE;
				return false;
			}
		}

		static bool skyalert_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial_with_speed(DEVICE_PORT_ITEM->text.value, 115200, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle) {
				if (skyalert_read_record(device)) {
					INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Interactive Astronomy SkyAlert");
					indigo_update_property(device, INFO_PROPERTY, NULL);
					return true;
				}
				indigo_send_message(device, "Handshake failed");
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
			return false;
		}

		static void skyalert_close(indigo_device *device) {
			INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			indigo_update_property(device, INFO_PROPERTY, NULL);
			indigo_uni_close(&PRIVATE_DATA->handle);
		}
	}
	aux {
		name = "Interactive Astronomy SkyAlert";
		interface = INDIGO_INTERFACE_AUX_SQM;
		additional_instances = true;
		on_attach {
			INFO_PROPERTY->count = 6;
			INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
		}
		number AUX_INFO {
			name = AUX_INFO_PROPERTY_NAME;
			group = "Info";
			label = "Info";
			perm = INDIGO_RO_PERM;
			item AUX_INFO_SKY_BRIGHTNESS {
				name = AUX_WEATHER_SKY_BRIGHTNESS_ITEM_NAME;
				label = "Sky brightness [raw]";
			}
			item AUX_INFO_POWER {
				name = AUX_INFO_POWER_ITEM_NAME;
				label = "Power [1 = ok, 0 = failure]";
			}
		}
		number AUX_WEATHER {
			name = AUX_WEATHER_PROPERTY_NAME;
			group = "Info";
			label = "Weather conditions";
			perm = INDIGO_RO_PERM;
			item AUX_WEATHER_TEMPERATURE {
				name = AUX_WEATHER_TEMPERATURE_ITEM_NAME;
				label = "Temperature [C]";
			}
			item AUX_WEATHER_HUMIDITY {
				name = AUX_WEATHER_HUMIDITY_ITEM_NAME;
				label = "Humidity [%]";
			}
			item AUX_WEATHER_PRESSURE {
				name = AUX_WEATHER_PRESSURE_ITEM_NAME;
				label = "Pressure [hPa]";
			}
			item AUX_WEATHER_WIND_SPEED {
				name = AUX_WEATHER_WIND_SPEED_ITEM_NAME;
				label = "Wind speed [raw]";
			}
			item AUX_WEATHER_RAIN {
				name = AUX_WEATHER_RAIN_ITEM_NAME;
				label = "Dampness [raw]";
			}
			item AUX_WEATHER_SKY_TEMPERATURE {
				name = AUX_WEATHER_SKY_TEMPERATURE_ITEM_NAME;
				label = "Sky temperature [\u00B0C]";
			}
		}
	}
}
