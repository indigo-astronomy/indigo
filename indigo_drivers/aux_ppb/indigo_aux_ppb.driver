// Copyright (c) 2019-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// PegasusAstro Pocket Powerbox driver definition

driver ppb {
	label = "PegasusAstro Pocket Powerbox";
	author = "Peter Polakovic <peter.polakovic@cloudmakers.eu>, PPBA support by Aaron Freimark <abf@mac.com>";
	copyright = "Copyright (c) 2019-2025 CloudMakers, s. r. o.";
	version = 27;
	serial {
		pattern {
			product = "PPB";
			vid = 0x0403;
		}
	}
	// include { }
	define {
		#define AUX_GROUP															"Powerbox"
	}
	data {
		bool is_advance;
		bool is_micro;
		bool is_saddle;
		char response[128];
	}
	code {
		static bool ppb_command(indigo_device *device, char *command, ...) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				va_list args;
				va_start(args, command);
				result = indigo_uni_vprintf_line(PRIVATE_DATA->handle, command, args);
				va_end(args);
				if (result > 0) {
					result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\n", "\r\n", INDIGO_DELAY(1));
				}
			}
			return result > 0;
		}

		static bool ppb_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial(DEVICE_PORT_ITEM->text.value, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				if (ppb_command(device, "P#")) {
					if (!strcmp(PRIVATE_DATA->response, "PPB_OK")) {
						strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "PeagasusAstro PPB");
						PRIVATE_DATA->is_advance = false;
						PRIVATE_DATA->is_micro = false;
						PRIVATE_DATA->is_saddle = false;
						AUX_POWER_OUTLET_STATE_PROPERTY->hidden = true;
						AUX_DSLR_POWER_PROPERTY->hidden = true;
						AUX_POWER_OUTLET_PROPERTY->count = 2;
						ppb_command(device, "PL:1");
						return true;
					} else if (!strcmp(PRIVATE_DATA->response, "PPBA_OK")) {
						strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "PeagasusAstro PPBA");
						PRIVATE_DATA->is_advance = true;
						PRIVATE_DATA->is_micro = false;
						PRIVATE_DATA->is_saddle = false;
						AUX_POWER_OUTLET_STATE_PROPERTY->hidden = false;
						AUX_DSLR_POWER_PROPERTY->hidden = false;
						AUX_POWER_OUTLET_PROPERTY->count = 2;
						ppb_command(device, "PL:1");
						return true;
					} else if (!strcmp(PRIVATE_DATA->response, "PPBM_OK")) {
						strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "PeagasusAstro PPBM");
						PRIVATE_DATA->is_advance = true;
						PRIVATE_DATA->is_micro = true;
						PRIVATE_DATA->is_saddle = false;
						AUX_POWER_OUTLET_STATE_PROPERTY->hidden = false;
						AUX_DSLR_POWER_PROPERTY->hidden = false;
						AUX_POWER_OUTLET_PROPERTY->count = 2;
						ppb_command(device, "PL:1");
						return true;
					} else if (!strcmp(PRIVATE_DATA->response, "SPB")) {
						strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "PeagasusAstro SPB");
						PRIVATE_DATA->is_advance = false;
						PRIVATE_DATA->is_micro = false;
						PRIVATE_DATA->is_saddle = true;
						AUX_POWER_OUTLET_STATE_PROPERTY->hidden = true;
						AUX_DSLR_POWER_PROPERTY->hidden = true;
						AUX_POWER_OUTLET_PROPERTY->count = 1;
						ppb_command(device, "PL:1");
						return true;
					}
				}
				indigo_uni_close(&PRIVATE_DATA->handle);
				indigo_send_message(device, "Handshake failed");
			}
			return false;
		}

		static void ppb_close(indigo_device *device) {
			if (PRIVATE_DATA->handle != NULL) {
				ppb_command(device, "PL:0");
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
		}
	}
	// on_init { }
	// on_shutdown { }
	aux {
		name = "Pocket Powerbox";
		interface = INDIGO_INTERFACE_AUX_POWERBOX | INDIGO_INTERFACE_AUX_WEATHER;
		additional_instances = true;
		// code { }
		on_timer {
			bool updatePowerOutlet = false;
			bool updatePowerOutletState = false;
			bool updateDSLRPower = false;
			bool updateHeaterOutlet = false;
			bool updateWeather = false;
			bool updateInfo = false;
			bool updateAutoHeater = false;
			if (ppb_command(device, "PA")) {
				char *pnt, *token = strtok_r(PRIVATE_DATA->response, ":", &pnt);
				if ((token = strtok_r(NULL, ":", &pnt))) { // Voltage
					double value = indigo_atod(token);
					if (AUX_INFO_VOLTAGE_ITEM->number.value != value) {
						updateInfo = true;
						AUX_INFO_VOLTAGE_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Current
					double value =  indigo_atod(token) / 65.0;
					if (AUX_INFO_CURRENT_ITEM->number.value != value) {
						updateInfo = true;
						AUX_INFO_CURRENT_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Temp
					double value = indigo_atod(token);
					if (AUX_WEATHER_TEMPERATURE_ITEM->number.value != value) {
						updateWeather = true;
						AUX_WEATHER_TEMPERATURE_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Humidity
					double value = indigo_atod(token);
					if (AUX_WEATHER_HUMIDITY_ITEM->number.value != value) {
						updateWeather = true;
						AUX_WEATHER_HUMIDITY_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Dewpoint
					double value = indigo_atod(token);
					if (AUX_WEATHER_DEWPOINT_ITEM->number.value != value) {
						updateWeather = true;
						AUX_WEATHER_DEWPOINT_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // power ports status
					bool state = token[0] == '1';
					if (AUX_POWER_OUTLET_1_ITEM->sw.value != state) {
						AUX_POWER_OUTLET_1_ITEM->sw.value = state;
						updatePowerOutletState = true;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // DSLR ports status
					bool state = token[0] == '1';
					if (AUX_POWER_OUTLET_2_ITEM->sw.value != state) {
						AUX_POWER_OUTLET_2_ITEM->sw.value = state;
						updatePowerOutletState = true;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Dew1
					double value = round(indigo_atod(token) * 100.0 / 255.0);
					if (AUX_HEATER_OUTLET_1_ITEM->number.value != value) {
						updateHeaterOutlet = true;
						AUX_HEATER_OUTLET_1_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Dew2
					double value = round(indigo_atod(token) * 100.0 / 255.0);
					if (AUX_HEATER_OUTLET_2_ITEM->number.value != value) {
						updateHeaterOutlet = true;
						AUX_HEATER_OUTLET_2_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Autodew
					bool state = token[0] == '1';
					if (AUX_DEW_CONTROL_AUTOMATIC_ITEM->sw.value != state) {
						indigo_set_switch(AUX_DEW_CONTROL_PROPERTY, state ? AUX_DEW_CONTROL_AUTOMATIC_ITEM : AUX_DEW_CONTROL_MANUAL_ITEM, true);
						updateAutoHeater = true;
					}
				}
				// PPBA
				if (PRIVATE_DATA->is_advance && (token = strtok_r(NULL, ":", &pnt))) { // Power Alert
					indigo_property_state state = token[0] == '1' ? INDIGO_ALERT_STATE : INDIGO_OK_STATE;
					if (AUX_POWER_OUTLET_STATE_1_ITEM->light.value != state) {
						AUX_POWER_OUTLET_STATE_1_ITEM->light.value = state;
						updatePowerOutletState = true;
					}
				}
				if (PRIVATE_DATA->is_advance && (token = strtok_r(NULL, ":", &pnt))) { // DSLR power
					if (!strcmp(token, "3")) {
						updateDSLRPower = !AUX_DSLR_POWER_3_ITEM->sw.value;
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_3_ITEM, true);
					} else if (!strcmp(token, "5")) {
						updateDSLRPower = !AUX_DSLR_POWER_5_ITEM->sw.value;
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_5_ITEM, true);
					} else if (!strcmp(token, "8")) {
						updateDSLRPower = !AUX_DSLR_POWER_8_ITEM->sw.value;
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_8_ITEM, true);
					} else if (!strcmp(token, "9")) {
						updateDSLRPower = !AUX_DSLR_POWER_9_ITEM->sw.value;
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_9_ITEM, true);
					} else if (!strcmp(token, "12")) {
						updateDSLRPower = !AUX_DSLR_POWER_12_ITEM->sw.value;
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_12_ITEM, true);
					}
				}
			}
			if (updatePowerOutlet) {
				AUX_POWER_OUTLET_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_POWER_OUTLET_PROPERTY, NULL);
			}
			if (updatePowerOutletState) {
				AUX_POWER_OUTLET_STATE_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_POWER_OUTLET_STATE_PROPERTY, NULL);
			}
			if (updateDSLRPower) {
				AUX_DSLR_POWER_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_DSLR_POWER_PROPERTY, NULL);
			}
			if (updateHeaterOutlet) {
				AUX_HEATER_OUTLET_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_HEATER_OUTLET_PROPERTY, NULL);
			}
			if (updateAutoHeater) {
				AUX_DEW_CONTROL_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_DEW_CONTROL_PROPERTY, NULL);
			}
			if (updateWeather) {
				AUX_WEATHER_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_WEATHER_PROPERTY, NULL);
			}
			if (updateInfo) {
				AUX_INFO_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_INFO_PROPERTY, NULL);
			}
			indigo_reschedule_timer(device, 2, &PRIVATE_DATA->aux_timer);
		}
		on_connect {
			if (ppb_command(device, "PV")) {
				strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, PRIVATE_DATA->response);
			}
			indigo_update_property(device, INFO_PROPERTY, NULL);
			if (ppb_command(device, "PA")) {
				char *pnt, *token = strtok_r(PRIVATE_DATA->response, ":", &pnt);
				if ((token = strtok_r(NULL, ":", &pnt))) { // Voltage
					AUX_INFO_VOLTAGE_ITEM->number.value = indigo_atod(token);
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Current
					AUX_INFO_CURRENT_ITEM->number.value = indigo_atod(token) / 65.0;
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Temp
					AUX_WEATHER_TEMPERATURE_ITEM->number.value = indigo_atod(token);
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Humidity
					AUX_WEATHER_HUMIDITY_ITEM->number.value = indigo_atod(token);
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Dewpoint
					AUX_WEATHER_DEWPOINT_ITEM->number.value = indigo_atod(token);
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Power port status
					AUX_POWER_OUTLET_1_ITEM->sw.value = token[0] == '1';
				}
				if (PRIVATE_DATA->is_saddle) {
					token = strtok_r(PRIVATE_DATA->response, ":", &pnt); // adjustment status
				} else {
					if ((token = strtok_r(NULL, ":", &pnt))) { // DSLR port status
						AUX_POWER_OUTLET_2_ITEM->sw.value = token[0] == '1';
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Dew1
					AUX_HEATER_OUTLET_1_ITEM->number.value = AUX_HEATER_OUTLET_1_ITEM->number.target = round(indigo_atod(token) * 100.0 / 255.0);
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Dew2
					AUX_HEATER_OUTLET_2_ITEM->number.value = AUX_HEATER_OUTLET_2_ITEM->number.target = round(indigo_atod(token) * 100.0 / 255.0);
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Autodew
					indigo_set_switch(AUX_DEW_CONTROL_PROPERTY, atoi(token) == 1 ? AUX_DEW_CONTROL_AUTOMATIC_ITEM : AUX_DEW_CONTROL_MANUAL_ITEM, true);
				}
				if (PRIVATE_DATA->is_advance && (token = strtok_r(NULL, ":", &pnt))) { // Power warning
					AUX_POWER_OUTLET_STATE_1_ITEM->light.value = token[0] == 1 ? INDIGO_ALERT_STATE : INDIGO_OK_STATE;
				}
				if (PRIVATE_DATA->is_advance && (token = strtok_r(NULL, ":", &pnt))) { // DSLR power
					if (!strcmp(token, "3")) {
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_3_ITEM, true);
					} else if (!strcmp(token, "5")) {
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_5_ITEM, true);
					} else if (!strcmp(token, "8")) {
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_8_ITEM, true);
					} else if (!strcmp(token, "9")) {
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_9_ITEM, true);
					} else if (!strcmp(token, "12")) {
						indigo_set_switch(AUX_DSLR_POWER_PROPERTY, AUX_DSLR_POWER_12_ITEM, true);
					}
				}
			}
		}
		on_disconnect {
			strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			indigo_update_property(device, INFO_PROPERTY, NULL);
		}
		on_attach {
			INFO_PROPERTY->count = 6;
			strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
		}
		// on_detach { }
		text AUX_OUTLET_NAMES {
			name = AUX_OUTLET_NAMES_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Outlet names";
			persistent = true;
			always_defined = true;
			// handle_change = false;
			// synchronized_change = false;
			on_change {
				snprintf(AUX_HEATER_OUTLET_1_ITEM->label, INDIGO_NAME_SIZE, "%s [%%]", AUX_HEATER_OUTLET_NAME_1_ITEM->text.value);
				snprintf(AUX_HEATER_OUTLET_2_ITEM->label, INDIGO_NAME_SIZE, "%s [%%]", AUX_HEATER_OUTLET_NAME_2_ITEM->text.value);
				if (IS_CONNECTED) {
					indigo_delete_property(device, AUX_HEATER_OUTLET_PROPERTY, NULL);
					indigo_define_property(device, AUX_HEATER_OUTLET_PROPERTY, NULL);
					indigo_update_property(device, AUX_OUTLET_NAMES_PROPERTY, NULL);
				}
			}
			// on_attach { }
			// on_detach { }
			item AUX_HEATER_OUTLET_NAME_1 {
				name = AUX_HEATER_OUTLET_NAME_1_ITEM_NAME;
				label = "Heater #1";
				value = "Heater #1";
			}
			item AUX_HEATER_OUTLET_NAME_2 {
				name = AUX_HEATER_OUTLET_NAME_2_ITEM_NAME;
				label = "Heater #2";
				value = "Heater #2";
			}
		}
		switch AUX_POWER_OUTLET {
			name = AUX_POWER_OUTLET_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Power outlets";
			rule = INDIGO_ANY_OF_MANY_RULE;
			// handle_change = false;
			// synchronized_change = false;
			on_change {
				ppb_command(device, "P1:%d", AUX_POWER_OUTLET_1_ITEM->sw.value ? 1 : 0);
				if (!PRIVATE_DATA->is_saddle) {
					ppb_command(device, "P2:%d", AUX_POWER_OUTLET_2_ITEM->sw.value ? 1 : 0);
				}
			}
			// on_attach { }
			// on_detach { }
			item AUX_POWER_OUTLET_1 {
				name = AUX_POWER_OUTLET_1_ITEM_NAME;
				label = "Power outlets";
				value = true;
			}
			item AUX_POWER_OUTLET_2 {
				name = AUX_POWER_OUTLET_2_ITEM_NAME;
				label = "DSLR outlet";
				value = true;
			}
		}
		switch AUX_DSLR_POWER {
			name = "X_DSLR_POWER";
			group = AUX_GROUP;
			label = "DSLR Power";
			hidden = true;
			// handle_change = false;
			// synchronized_change = false;
			on_change {
				if (AUX_DSLR_POWER_3_ITEM->sw.value) {
					ppb_command(device, "P2:3");
				} else if (AUX_DSLR_POWER_5_ITEM->sw.value)
					ppb_command(device, "P2:5");
				else if (AUX_DSLR_POWER_8_ITEM->sw.value)
					ppb_command(device, "P2:8");
				else if (AUX_DSLR_POWER_9_ITEM->sw.value)
					ppb_command(device, "P2:9");
				else if (AUX_DSLR_POWER_12_ITEM->sw.value)
					ppb_command(device, "P2:12");
			}
			// on_attach { }
			// on_detach { }
			item AUX_DSLR_POWER_3 {
				name = "3";
				label = "3V";
				value = false;
			}
			item AUX_DSLR_POWER_5 {
				name = "5";
				label = "5V";
				value = false;
			}
			item AUX_DSLR_POWER_8 {
				name = "8";
				label = "8V";
				value = false;
			}
			item AUX_DSLR_POWER_9 {
				name = "9";
				label = "9V";
				value = false;
			}
			item AUX_DSLR_POWER_12 {
				name = "12";
				label = "12V";
				value = false;
			}
		}
		light AUX_POWER_OUTLET_STATE {
			name = AUX_POWER_OUTLET_STATE_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Power outlets state";
			hidden = true;
			// handle_change = false;
			// synchronized_change = false;
			// on_change { }
			// on_attach { }
			// on_detach { }
			item AUX_POWER_OUTLET_STATE_1 {
				name = AUX_POWER_OUTLET_STATE_1_ITEM_NAME;
				label = "Power warning state";
				value = INDIGO_OK_STATE;
			}
		}
		number AUX_HEATER_OUTLET {
			name = AUX_HEATER_OUTLET_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Heater outlets";
			// handle_change = false;
			// synchronized_change = false;
			on_change {
				ppb_command(device, "P3:%d", (int)(AUX_HEATER_OUTLET_1_ITEM->number.value * 255.0 / 100.0));
				ppb_command(device, "P4:%d", (int)(AUX_HEATER_OUTLET_2_ITEM->number.value * 255.0 / 100.0));
			}
			// on_attach { }
			// on_detach { }
			item AUX_HEATER_OUTLET_1 {
				name = AUX_HEATER_OUTLET_1_ITEM_NAME;
				label = "Heater #1 [%]";
				value = 0;
				min = 0;
				max = 100;
				step = 5;
			}
			item AUX_HEATER_OUTLET_2 {
				name = AUX_HEATER_OUTLET_2_ITEM_NAME;
				label = "Heater #2 [%]";
				value = 0;
				min = 0;
				max = 100;
				step = 5;
			}
		}
		switch AUX_DEW_CONTROL {
			name = AUX_DEW_CONTROL_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Dew control";
			// handle_change = false;
			// synchronized_change = false;
			on_change {
				ppb_command(device, "PD:%d", AUX_DEW_CONTROL_AUTOMATIC_ITEM->sw.value ? 1 : 0);
			}
			// on_attach { }
			// on_detach { }
			item AUX_DEW_CONTROL_MANUAL {
				name = AUX_DEW_CONTROL_MANUAL_ITEM_NAME;
				label = "Manual";
				value = true;
			}
			item AUX_DEW_CONTROL_AUTOMATIC {
				name = AUX_DEW_CONTROL_AUTOMATIC_ITEM_NAME;
				label = "Automatic";
				value = false;
			}
		}
		number AUX_WEATHER {
			name = AUX_WEATHER_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Weather info";
			perm = INDIGO_RO_PERM;
			// handle_change = false;
			// synchronized_change = false;
			// on_change { }
			// on_attach { }
			// on_detach { }
			item AUX_WEATHER_TEMPERATURE {
				name = AUX_WEATHER_TEMPERATURE_ITEM_NAME;
				label = "Temperature [C]";
				value = 0;
				min = -50;
				max = 100;
				step = 0;
			}
			item AUX_WEATHER_HUMIDITY {
				name = AUX_WEATHER_HUMIDITY_ITEM_NAME;
				label = "Humidity [%]";
				value = 0;
				min = 0;
				max = 100;
				step = 0;
			}
			item AUX_WEATHER_DEWPOINT {
				name = AUX_WEATHER_DEWPOINT_ITEM_NAME;
				label = "Dewpoint [C]";
				value = 0;
				min = -50;
				max = 100;
				step = 0;
			}
		}
		number AUX_INFO {
			name = AUX_INFO_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Sensors";
			perm = INDIGO_RO_PERM;
			// handle_change = false;
			// synchronized_change = false;
			// on_change { }
			// on_attach { }
			// on_detach { }
			item AUX_INFO_VOLTAGE {
				name = AUX_INFO_VOLTAGE_ITEM_NAME;
				label = "Voltage [V]";
				value = 0;
				min = 0;
				max = 15;
				step = 0;
			}
			item AUX_INFO_CURRENT {
				name = AUX_INFO_CURRENT_ITEM_NAME;
				label = "Current [A]";
				value = 0;
				min = 0;
				max = 20;
				step = 0;
			}
		}
		switch X_AUX_REBOOT {
			name = "X_AUX_REBOOT";
			group = AUX_GROUP;
			label = "Reboot";
			// handle_change = false;
			// synchronized_change = false;
			on_change {
				if (X_AUX_REBOOT_ITEM->sw.value) {
					indigo_uni_printf(PRIVATE_DATA->handle, "PF\n");
					X_AUX_REBOOT_ITEM->sw.value = false;
				}
			}
			// on_attach { }
			// on_detach { }
			item X_AUX_REBOOT {
				name = "REBOOT";
				label = "Reboot";
				value = false;
			}
		}
		switch AUX_SAVE_OUTLET_STATES_AS_DEFAULT {
			name = AUX_SAVE_OUTLET_STATES_AS_DEFAULT_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Save current outlet states as default";
			// handle_change = false;
			// synchronized_change = false;
			on_change {
				if (AUX_SAVE_OUTLET_STATES_AS_DEFAULT_ITEM->sw.value) {
					char command[] = "PE:0000";
					char *port_mask = command + 3;
					for (int i = 0; i < AUX_POWER_OUTLET_PROPERTY->count; i++) {
						port_mask[i] = AUX_POWER_OUTLET_PROPERTY->items[i].sw.value ? '1' : '0';
					}
					ppb_command(device, command);
					AUX_SAVE_OUTLET_STATES_AS_DEFAULT_ITEM->sw.value = false;
				}
			}
			// on_attach { }
			// on_detach { }
			item AUX_SAVE_OUTLET_STATES_AS_DEFAULT {
				name = AUX_SAVE_OUTLET_STATES_AS_DEFAULT_ITEM_NAME;
				label = "Save";
				value = false;
			}
		}
	}
}
