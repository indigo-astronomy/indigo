// Copyright (c) 2019-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Alnitak Astrosystems FlipFlat driver definition

driver flipflat {
	label = "Alnitak Astrosystems FlipFlat";
	author = "Peter Polakovic";
	copyright = "Copyright (c) 2019-2025 CloudMakers, s. r. o.";
	version = 8;
	serial;
	data {
		int type;
		char response[16];
	}
	code {
		static bool flipflat_command(indigo_device *device, char *command, ...) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				va_list args;
				va_start(args, command);
				result = indigo_uni_vtprintf(PRIVATE_DATA->handle, command, args, "\r");
				va_end(args);
				if (result > 0) {
					result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\n", "\n", INDIGO_DELAY(1));
				}
			}
			return result > 0 && PRIVATE_DATA->response[0] == '*';
		}

		static bool flipflat_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial(DEVICE_PORT_ITEM->text.value, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				indigo_uni_set_dtr(PRIVATE_DATA->handle, true);
				indigo_usleep(INDIGO_DELAY(0.1));
				indigo_uni_set_rts(PRIVATE_DATA->handle, false);
				indigo_usleep(INDIGO_DELAY(2));
				if (flipflat_command(device, ">POOO")) {
					if (sscanf(PRIVATE_DATA->response, "*P%02dOOO", &PRIVATE_DATA->type) != 1) {
						PRIVATE_DATA->type = 0;
					}
					switch (PRIVATE_DATA->type) {
						case 10:
							AUX_LIGHT_SWITCH_PROPERTY->hidden = AUX_LIGHT_INTENSITY_PROPERTY->hidden = false;
							AUX_COVER_PROPERTY->hidden = true;
							INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Flat-Man_XL");
							break;
						case 15:
							AUX_LIGHT_SWITCH_PROPERTY->hidden = AUX_LIGHT_INTENSITY_PROPERTY->hidden = false;
							AUX_COVER_PROPERTY->hidden = true;
							INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Flat-Man_L");
							break;
						case 19:
							AUX_LIGHT_SWITCH_PROPERTY->hidden = AUX_LIGHT_INTENSITY_PROPERTY->hidden = false;
							AUX_COVER_PROPERTY->hidden = true;
							INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Flat-Man");
							break;
						case 98:
							AUX_LIGHT_SWITCH_PROPERTY->hidden = AUX_LIGHT_INTENSITY_PROPERTY->hidden = true;
							AUX_COVER_PROPERTY->hidden = false;
							INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Flip-Mask/Remote Dust Cover");
							break;
						case 99:
							AUX_LIGHT_SWITCH_PROPERTY->hidden = AUX_LIGHT_INTENSITY_PROPERTY->hidden = false;
							AUX_COVER_PROPERTY->hidden = false;
							INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Flip-Flap");
							break;
						default:
							AUX_LIGHT_SWITCH_PROPERTY->hidden = AUX_LIGHT_INTENSITY_PROPERTY->hidden = false;
							AUX_COVER_PROPERTY->hidden = false;
							INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
							break;
					}
					if (flipflat_command(device, ">VOOO")) {
						INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, PRIVATE_DATA->response + 4);
						indigo_update_property(device, INFO_PROPERTY, NULL);
						return true;
					}
				}
				indigo_send_message(device, "Handshake failed");
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
			return false;
		}

		static void flipflat_close(indigo_device *device) {
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			indigo_update_property(device, INFO_PROPERTY, NULL);
			indigo_uni_close(&PRIVATE_DATA->handle);
		}
	}
	aux {
		name = "FlipFlat";
		interface = INDIGO_INTERFACE_AUX_LIGHTBOX;
		additional_instances = true;
		on_connect {
			if (!AUX_LIGHT_SWITCH_PROPERTY->hidden) {
				AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
				AUX_COVER_PROPERTY->state = INDIGO_ALERT_STATE;
				if (flipflat_command(device, ">SOOO")) {
					int type, q, r, s;
					if (sscanf(PRIVATE_DATA->response, "*S%02d%1d%1d%1d", &type, &q, &r, &s) == 4) {
						if (s == 1 || s == 2) {
							AUX_COVER_PROPERTY->state = INDIGO_OK_STATE;
							indigo_set_switch(AUX_COVER_PROPERTY, s == 1 ? AUX_COVER_CLOSE_ITEM : AUX_COVER_OPEN_ITEM, true);
						}
						AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_OK_STATE;
						indigo_set_switch(AUX_LIGHT_SWITCH_PROPERTY, r == 1 ? AUX_LIGHT_SWITCH_ON_ITEM : AUX_LIGHT_SWITCH_OFF_ITEM, true);
					}
				}
			}
			if (!AUX_LIGHT_INTENSITY_PROPERTY->hidden) {
				AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
				if (flipflat_command(device, ">JOOO")) {
					int type, value;
					if (sscanf(PRIVATE_DATA->response, "*J%02d%3d", &type, &value) == 2) {
						AUX_LIGHT_INTENSITY_ITEM->number.value = AUX_LIGHT_INTENSITY_ITEM->number.target = (100.0 * value) / 255;
						AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_OK_STATE;
					}
				}
			}
		}
		on_attach {
			INFO_PROPERTY->count = 6;
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
		}
		switch AUX_COVER {
			name = AUX_COVER_PROPERTY_NAME;
			group = AUX_MAIN_GROUP;
			label = "Cover";
			on_change {
				if (flipflat_command(device, ">%cOOO", AUX_COVER_OPEN_ITEM->sw.value ? 'O' : 'C')) {
					AUX_COVER_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, AUX_COVER_PROPERTY, NULL);
					AUX_COVER_PROPERTY->state = INDIGO_ALERT_STATE;
					for (int i = 0; i < 10; i++) {
						indigo_sleep(1);
						if (flipflat_command(device, ">SOOO")) {
							int type, q, r, s;
							if (sscanf(PRIVATE_DATA->response, "*S%02d%1d%1d%1d", &type, &q, &r, &s) == 4) {
								if ((AUX_COVER_OPEN_ITEM->sw.value && s == 2) || (AUX_COVER_CLOSE_ITEM->sw.value && s == 1)) {
									AUX_COVER_PROPERTY->state = INDIGO_OK_STATE;
									break;
								}
							}
						}
					}
				} else {
					AUX_COVER_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			item AUX_COVER_OPEN {
				name = AUX_COVER_OPEN_ITEM_NAME;
				label = "Open";
				value = false;
			}
			item AUX_COVER_CLOSE {
				name = AUX_COVER_CLOSE_ITEM_NAME;
				label = "Close";
				value = true;
			}
		}
		switch AUX_LIGHT_SWITCH {
			name = AUX_LIGHT_SWITCH_PROPERTY_NAME;
			group = AUX_MAIN_GROUP;
			label = "Light (on/off)";
			persistent = true;
			on_change {
				if (!flipflat_command(device, ">%cOOO", AUX_LIGHT_SWITCH_ON_ITEM->sw.value ? 'L' : 'D')) {
					AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			item AUX_LIGHT_SWITCH_ON {
				name = AUX_LIGHT_SWITCH_ON_ITEM_NAME;
				label = "On";
				value = false;
			}
			item AUX_LIGHT_SWITCH_OFF {
				name = AUX_LIGHT_SWITCH_OFF_ITEM_NAME;
				label = "Off";
				value = true;
			}
		}
		number AUX_LIGHT_INTENSITY {
			name = AUX_LIGHT_INTENSITY_PROPERTY_NAME;
			group = AUX_MAIN_GROUP;
			label = "Light intensity";
			persistent = true;
			on_change {
				if (!flipflat_command(device, ">B%03d", (int)(255 * AUX_LIGHT_INTENSITY_ITEM->number.value / 100))) {
					AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			item AUX_LIGHT_INTENSITY {
				name = AUX_LIGHT_INTENSITY_ITEM_NAME;
				label = "Intensity (%)";
				value = 50;
				max = 100;
				step = 1;
				format = "%.0f";
			}
		}
	}
}
