// Copyright (c) 2019-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Unihedron SQM driver definition

driver sqm {
	label = "Unihedron SQM";
	author = "Peter Polakovic <peter.polakovic@cloudmakers.eu>";
	copyright = "Copyright (c) 2019-2025 CloudMakers, s. r. o.";
	version = 18;
	serial;
	define {
		#define AUX_GROUP "Sensor"
	}
	data {
		char response[128];
	}
	code {
		static bool sqm_command(indigo_device *device, const char *command) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				result = indigo_uni_write(PRIVATE_DATA->handle, command, strlen(command));
			}
			if (result > 0) {
				result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\n", "\r\n", INDIGO_DELAY(1));
			}
			return result > 0;
		}

		static bool sqm_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial_with_speed(DEVICE_PORT_ITEM->text.value, 115200, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				if (sqm_command(device, "ix")) {
					if (PRIVATE_DATA->response[0] == 'i' && PRIVATE_DATA->response[1] == ',') {
						return true;
					}
				}
				indigo_uni_close(&PRIVATE_DATA->handle);
				indigo_send_message(device, "Handshake failed");
			}
			return false;
		}

		static void sqm_close(indigo_device *device) {
			indigo_uni_close(&PRIVATE_DATA->handle);
		}
	}
	aux {
		name = "Unihedron SQM";
		interface = INDIGO_INTERFACE_AUX_SQM;
		additional_instances = true;
		on_timer {
			char *pnt;
			if (sqm_command(device, "rx")) {
				char *tok = strtok_r(PRIVATE_DATA->response, ",", &pnt);
				if (tok == NULL) {
					AUX_INFO_PROPERTY->state = INDIGO_ALERT_STATE;
					AUX_WEATHER_PROPERTY->state = INDIGO_ALERT_STATE;
				} else if (*tok == 'r') {
					AUX_WEATHER_SKY_BRIGHTNESS_ITEM->number.value = indigo_atod(strtok_r(NULL, ",", &pnt));
					AUX_WEATHER_SKY_BORTLE_CLASS_ITEM->number.value = indigo_aux_sky_bortle(AUX_WEATHER_SKY_BRIGHTNESS_ITEM->number.value);
					X_AUX_SENSOR_FREQUENCY_ITEM->number.value = indigo_atod(strtok_r(NULL, ",", &pnt));
					X_AUX_SENSOR_COUNTS_ITEM->number.value = indigo_atod(strtok_r(NULL, ",", &pnt));
					X_AUX_SENSOR_PERIOD_ITEM->number.value = indigo_atod(strtok_r(NULL, ",", &pnt));
					AUX_WEATHER_SKY_TEMPERATURE_ITEM->number.value = indigo_atod(strtok_r(NULL, ",", &pnt));
					AUX_INFO_PROPERTY->state = INDIGO_OK_STATE;
					AUX_WEATHER_PROPERTY->state = INDIGO_OK_STATE;
				}
			} else {
				AUX_INFO_PROPERTY->state = INDIGO_ALERT_STATE;
				AUX_WEATHER_PROPERTY->state = INDIGO_ALERT_STATE;
			}
			indigo_update_property(device, AUX_INFO_PROPERTY, NULL);
			indigo_update_property(device, AUX_WEATHER_PROPERTY, NULL);
			indigo_reschedule_timer(device, 10, &PRIVATE_DATA->aux_timer);
		}
		number AUX_INFO {
			name = AUX_INFO_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Sensor readings";
			perm = INDIGO_RO_PERM;
			item X_AUX_SENSOR_FREQUENCY {
				name = "X_AUX_SENSOR_FREQUENCY";
				label = "SQM sensor frequency [Hz]";
				format = "%.0f";
			}
			item X_AUX_SENSOR_COUNTS {
				name = "X_AUX_SENSOR_COUNTS";
				label = "SQM sensor period [counts]";
				format = "%.0f";
			}
			item X_AUX_SENSOR_PERIOD {
				name = "X_AUX_SENSOR_PERIOD";
				label = "SQM sensor period [sec]";
			}
		}
		number AUX_WEATHER {
			name = AUX_WEATHER_PROPERTY_NAME;
			group = AUX_GROUP;
			label = "Sky quality";
			perm = INDIGO_RO_PERM;
			item AUX_WEATHER_SKY_BRIGHTNESS {
				name = AUX_WEATHER_SKY_BRIGHTNESS_ITEM_NAME;
				label = "Sky brightness [m/arcsec\u00B2]";
			}
			item AUX_WEATHER_SKY_TEMPERATURE {
				name = AUX_WEATHER_SKY_TEMPERATURE_ITEM_NAME;
				label = "Sky temperature [\u00B0C]";
			}
			item AUX_WEATHER_SKY_BORTLE_CLASS {
				name = AUX_WEATHER_SKY_BORTLE_CLASS_ITEM_NAME;
				label = "Sky Bortle class";
			}
		}
	}
}
