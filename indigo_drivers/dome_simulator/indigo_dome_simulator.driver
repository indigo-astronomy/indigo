// Copyright (c) 2017-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// DOME Simulator driver definition

// version history
// 2.0 by Peter Polakovic <peter.polakovic@cloudmakers.eu>
// 3.0 refactoring by Peter Polakovic <peter.polakovic@cloudmakers.eu>

driver simulator {
	label = "Dome Simulator";
	author = "Peter Polakovic <peter.polakovic@cloudmakers.eu>";
	copyright = "Copyright (c) 2017-2025 CloudMakers, s. r. o.";
	version = 6;
	// include { }
	// define { }
	data {
		int target_position, current_position;
	}
	// code { }
	// on_init { }
	// on_shutdown { }
	dome {
		name = DRIVER_LABEL;
		additional_instances = true;
		// code { }
		on_timer {
			if (DOME_HORIZONTAL_COORDINATES_PROPERTY->state == INDIGO_ALERT_STATE) {
				DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->target_position = PRIVATE_DATA->current_position;
				indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
				DOME_STEPS_PROPERTY->state = INDIGO_ALERT_STATE;
				indigo_update_property(device, DOME_STEPS_PROPERTY, NULL);
			} else {
				if (DOME_DIRECTION_MOVE_CLOCKWISE_ITEM->sw.value && PRIVATE_DATA->current_position != PRIVATE_DATA->target_position) {
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_BUSY_STATE;
					int dif = (int)(PRIVATE_DATA->target_position - PRIVATE_DATA->current_position + 360) % 360;
					if (dif > DOME_SPEED_ITEM->number.value) {
						DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->current_position = (int)(PRIVATE_DATA->current_position + DOME_SPEED_ITEM->number.value + 360) % 360;
					} else {
						DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->current_position = PRIVATE_DATA->target_position;
					}
					indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
					DOME_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, DOME_STEPS_PROPERTY, NULL);
					indigo_set_timer(device, 0.1, dome_timer_callback, NULL);
				} else if (DOME_DIRECTION_MOVE_COUNTERCLOCKWISE_ITEM->sw.value && PRIVATE_DATA->current_position != PRIVATE_DATA->target_position) {
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_BUSY_STATE;
					int dif = (int)(PRIVATE_DATA->current_position - PRIVATE_DATA->target_position + 360) % 360;
					if (dif > DOME_SPEED_ITEM->number.value) {
						DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->current_position = (int)(PRIVATE_DATA->current_position - DOME_SPEED_ITEM->number.value + 360) % 360;
					} else {
						DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->current_position = PRIVATE_DATA->target_position;
					}
					indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
					DOME_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, DOME_STEPS_PROPERTY, NULL);
					indigo_set_timer(device, 0.1, dome_timer_callback, NULL);
				} else {
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_OK_STATE;
					DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->current_position;
					indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
					DOME_STEPS_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, DOME_STEPS_PROPERTY, NULL);
					if (DOME_PARK_PROPERTY->state == INDIGO_BUSY_STATE) {
						DOME_PARK_PROPERTY->state = INDIGO_OK_STATE;
						indigo_update_property(device, DOME_PARK_PROPERTY, "Parked");
					}
				}
			}
		}
		// on_connect { }
		// on_disconnect { }
		// on_attach { }
		// on_detach { }
		inherited DOME_SPEED {
			// on_change { }
			on_attach {
				DOME_SPEED_ITEM->number.value = 1;
			}
			// on_detach { }
		}
		inherited DOME_HORIZONTAL_COORDINATES {
			preserve_values = true;
			on_change {
				if (DOME_PARK_PARKED_ITEM->sw.value) {
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_ALERT_STATE;
					indigo_send_message(device, "Dome is parked");
				} else {
					PRIVATE_DATA->target_position = (int)DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.target;
					int dif = (int)(PRIVATE_DATA->target_position - PRIVATE_DATA->current_position + 360) % 360;
					if (dif < 180) {
						indigo_set_switch(DOME_DIRECTION_PROPERTY, DOME_DIRECTION_MOVE_CLOCKWISE_ITEM, true);
						DOME_STEPS_ITEM->number.value = dif;
					} else if (dif > 180) {
						indigo_set_switch(DOME_DIRECTION_PROPERTY, DOME_DIRECTION_MOVE_COUNTERCLOCKWISE_ITEM, true);
						DOME_STEPS_ITEM->number.value = 360 - dif;
					}
					DOME_DIRECTION_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, DOME_DIRECTION_PROPERTY, NULL);
					DOME_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, DOME_STEPS_PROPERTY, NULL);
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
					DOME_EQUATORIAL_COORDINATES_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, DOME_EQUATORIAL_COORDINATES_PROPERTY, NULL);
					indigo_set_timer(device, 0.5, dome_timer_callback, NULL);
				}
			}
			on_attach {
				DOME_HORIZONTAL_COORDINATES_PROPERTY->perm = INDIGO_RW_PERM;
			}
			// on_detach { }
		}
		inherited DOME_SLAVING_PARAMETERS {
			hidden = false;
			// on_change { }
			// on_attach { }
			// on_detach { }
		}
		inherited DOME_STEPS {
			on_change {
				if (DOME_PARK_PARKED_ITEM->sw.value) {
					DOME_STEPS_PROPERTY->state = INDIGO_ALERT_STATE;
					indigo_send_message(device, "Dome is parked");
				} else {
					DOME_STEPS_ITEM->number.value = (int)DOME_STEPS_ITEM->number.value;
					if (DOME_DIRECTION_MOVE_COUNTERCLOCKWISE_ITEM->sw.value) {
						PRIVATE_DATA->target_position = (int)(PRIVATE_DATA->current_position - DOME_STEPS_ITEM->number.value + 360) % 360;
					} else if (DOME_DIRECTION_MOVE_CLOCKWISE_ITEM->sw.value) {
						PRIVATE_DATA->target_position = (int)(PRIVATE_DATA->current_position + DOME_STEPS_ITEM->number.value + 360) % 360;
					}
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_BUSY_STATE;
					DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->current_position;
					indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
					DOME_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_set_timer(device, 0.5, dome_timer_callback, NULL);
				}
			}
			// on_attach { }
			// on_detach { }
		}
		inherited DOME_EQUATORIAL_COORDINATES {
			on_change {
				double az;
				if ((DOME_SLAVING_ENABLE_ITEM->sw.value) && indigo_fix_dome_azimuth(device, DOME_EQUATORIAL_COORDINATES_RA_ITEM->number.value, DOME_EQUATORIAL_COORDINATES_DEC_ITEM->number.value, DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value, &az)) {
					if (DOME_PARK_PARKED_ITEM->sw.value) {
						if (DOME_EQUATORIAL_COORDINATES_PROPERTY->state != INDIGO_ALERT_STATE) {
							DOME_EQUATORIAL_COORDINATES_PROPERTY->state = INDIGO_ALERT_STATE;
							indigo_send_message(device, "Can not Synchronize. Dome is parked.");
						}
					} else {
						PRIVATE_DATA->target_position = (int)(DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.target = az);
						int dif = (int)(PRIVATE_DATA->target_position - PRIVATE_DATA->current_position + 360) % 360;
						if (dif < 180) {
							indigo_set_switch(DOME_DIRECTION_PROPERTY, DOME_DIRECTION_MOVE_CLOCKWISE_ITEM, true);
							DOME_STEPS_ITEM->number.value = dif;
						} else if (dif > 180) {
							indigo_set_switch(DOME_DIRECTION_PROPERTY, DOME_DIRECTION_MOVE_COUNTERCLOCKWISE_ITEM, true);
							DOME_STEPS_ITEM->number.value = 360 - dif;
						}
						DOME_DIRECTION_PROPERTY->state = INDIGO_OK_STATE;
						indigo_update_property(device, DOME_DIRECTION_PROPERTY, NULL);
						DOME_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
						indigo_update_property(device, DOME_STEPS_PROPERTY, NULL);
						DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_BUSY_STATE;
						indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
						indigo_set_timer(device, 0.5, dome_timer_callback, NULL);
					}
				}
			}
			// on_attach { }
			// on_detach { }
		}
		inherited DOME_ABORT_MOTION {
			on_change {
				if (DOME_ABORT_MOTION_ITEM->sw.value && DOME_HORIZONTAL_COORDINATES_PROPERTY->state == INDIGO_BUSY_STATE) {
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_ALERT_STATE;
					DOME_HORIZONTAL_COORDINATES_AZ_ITEM->number.value = PRIVATE_DATA->current_position;
					indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
				}
				DOME_ABORT_MOTION_ITEM->sw.value = false;
			}
			// on_attach { }
			// on_detach { }
		}
		inherited DOME_SHUTTER {
			on_change {
				DOME_SHUTTER_PROPERTY->state = INDIGO_BUSY_STATE;
				indigo_usleep(INDIGO_DELAY(6));
				DOME_SHUTTER_PROPERTY->state = INDIGO_OK_STATE;
			}
			// on_attach { }
			// on_detach { }
		}
		inherited DOME_PARK {
			on_change {
				if (DOME_PARK_PARKED_ITEM->sw.value) {
					DOME_PARK_PROPERTY->state = INDIGO_BUSY_STATE;
					if (PRIVATE_DATA->current_position > 180) {
						DOME_DIRECTION_PROPERTY->state = INDIGO_OK_STATE;
						indigo_set_switch(DOME_DIRECTION_PROPERTY, DOME_DIRECTION_MOVE_CLOCKWISE_ITEM, true);
						DOME_STEPS_ITEM->number.value = 360 - PRIVATE_DATA->current_position;
					} else if (PRIVATE_DATA->current_position < 180) {
						DOME_DIRECTION_PROPERTY->state = INDIGO_OK_STATE;
						indigo_set_switch(DOME_DIRECTION_PROPERTY, DOME_DIRECTION_MOVE_COUNTERCLOCKWISE_ITEM, true);
						DOME_STEPS_ITEM->number.value = PRIVATE_DATA->current_position;
					}
					PRIVATE_DATA->target_position = 0;
					DOME_DIRECTION_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, DOME_DIRECTION_PROPERTY, NULL);
					DOME_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, DOME_STEPS_PROPERTY, NULL);
					DOME_HORIZONTAL_COORDINATES_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, DOME_HORIZONTAL_COORDINATES_PROPERTY, NULL);
					indigo_set_timer(device, 0.5, dome_timer_callback, NULL);
				}
			}
			// on_attach { }
			// on_detach { }
		}
	}
}
