// Copyright (c) 2016-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// CG-USB-ST4 Adapter driver definition

// version history
// 2.0 by Peter Polakovic <peter.polakovic@cloudmakers.eu>
// 3.0 refactoring by Peter Polakovic <peter.polakovic@cloudmakers.eu>

driver cgusbst4 {
	label = "CG-USB-ST4 Adapter";
	author = "Peter Polakovic";
	copyright = "Copyright (c) 2016-2025 CloudMakers, s. r. o.";
	version = 5;
	serial {
		pattern {
			product = "USB to ST4 Astrogene_1000";
		}
	}
	data {
		char response[2];
	}
	code {
		static bool cgusbst4_command(indigo_device *device, char *command, int response, ...) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				va_list args;
				va_start(args, response);
				result = indigo_uni_vprintf(PRIVATE_DATA->handle, command, args);
				va_end(args);
				if (result > 0 && response > 0) {
					indigo_usleep(INDIGO_DELAY(1));
					result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, response, "#", "", INDIGO_DELAY(1));
				}
			}
			return result > 0;
		}

		static bool cgusbst4_open(indigo_device *device) {
			char *name = DEVICE_PORT_ITEM->text.value;
			PRIVATE_DATA->handle = indigo_uni_open_serial(name, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				if (cgusbst4_command(device, "\006", 1) && PRIVATE_DATA->response[0] == 'A') {
					return true;
				}
				indigo_send_message(device, "Handshake failed");
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
			return false;
		}

		static void cgusbst4_close(indigo_device *device) {
			if (PRIVATE_DATA->handle != NULL) {
				indigo_uni_close(&PRIVATE_DATA->handle);
				PRIVATE_DATA->handle = 0;
				INDIGO_DRIVER_LOG(DRIVER_NAME, "Disconnected from %s", DEVICE_PORT_ITEM->text.value);
			}
		}
	}
	guider {
		name = "CG-USB-ST4 Adapter";
		inherited GUIDER_GUIDE_DEC {
			on_change {
				int duration = GUIDER_GUIDE_NORTH_ITEM->number.value;
				if (duration > 0) {
					cgusbst4_command(device, ":Mgn%4d#", 0, (int)GUIDER_GUIDE_NORTH_ITEM->number.value);
				} else {
					duration = GUIDER_GUIDE_SOUTH_ITEM->number.value;
					if (duration > 0) {
						cgusbst4_command(device, ":Mgs%4d#", 0, (int)GUIDER_GUIDE_SOUTH_ITEM->number.value);
					}
				}
				if (duration > 0) {
					GUIDER_GUIDE_DEC_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, GUIDER_GUIDE_DEC_PROPERTY, NULL);
					pthread_mutex_unlock(&PRIVATE_DATA->mutex);
					indigo_usleep(duration * 1000.0);
					pthread_mutex_lock(&PRIVATE_DATA->mutex);
					GUIDER_GUIDE_NORTH_ITEM->number.value = GUIDER_GUIDE_SOUTH_ITEM->number.value = 0;
					GUIDER_GUIDE_DEC_PROPERTY->state = INDIGO_OK_STATE;
				}
			}
		}
		inherited GUIDER_GUIDE_RA {
			on_change {
				int duration = GUIDER_GUIDE_EAST_ITEM->number.value;
				if (duration > 0) {
					cgusbst4_command(device, ":Mge%4d#", 0, (int)GUIDER_GUIDE_EAST_ITEM->number.value);
				} else {
					duration = GUIDER_GUIDE_WEST_ITEM->number.value;
					if (duration > 0) {
						cgusbst4_command(device, ":Mgw%4d#", 0, (int)GUIDER_GUIDE_WEST_ITEM->number.value);
					}
				}
				if (duration > 0) {
					GUIDER_GUIDE_RA_PROPERTY->state = INDIGO_BUSY_STATE;
					indigo_update_property(device, GUIDER_GUIDE_RA_PROPERTY, NULL);
					pthread_mutex_unlock(&PRIVATE_DATA->mutex);
					indigo_usleep(duration * 1000.0);
					pthread_mutex_lock(&PRIVATE_DATA->mutex);
					GUIDER_GUIDE_WEST_ITEM->number.value = GUIDER_GUIDE_WEST_ITEM->number.value = 0;
					GUIDER_GUIDE_RA_PROPERTY->state = INDIGO_OK_STATE;
				}
			}
		}
	}
}
