// Copyright (c) 2016-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// StarlightXpress AO driver definition

// version history
// 2.0 by Peter Polakovic <peter.polakovic@cloudmakers.eu>
// 3.0 refactoring by Peter Polakovic <peter.polakovic@cloudmakers.eu>

driver sx {
	label = "StarlightXpress AO";
	author = "Peter Polakovic";
	copyright = "Copyright (c) 2016-2025 CloudMakers, s. r. o.";
	version = 11;
	serial;
	data {
		char response[6];
	}
	code {
		static bool sx_command(indigo_device *device, char *command, int response, ...) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				va_list args;
				va_start(args, response);
				result = indigo_uni_vprintf(PRIVATE_DATA->handle, command, args);
				va_end(args);
				if (result > 0 && response > 0) {
					result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, response, "", "", INDIGO_DELAY((*command == 'K' || *command == 'R') ? 15 : 1));
				}
			}
			return result > 0;
		}

		static bool sx_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial(DEVICE_PORT_ITEM->text.value, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				if (sx_command(device, "X", 1) && PRIVATE_DATA->response[0] == 'Y') {
					if (sx_command(device, "V", 4) && PRIVATE_DATA->response[0] == 'V') {
						INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, DRIVER_LABEL);
						INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, PRIVATE_DATA->response + 1);
						indigo_update_property(device, INFO_PROPERTY, NULL);
						return true;
					}
				}
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
			return false;
		}

		static void sx_close(indigo_device *device) {
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			indigo_update_property(device, INFO_PROPERTY, NULL);
			indigo_uni_close(&PRIVATE_DATA->handle);
		}
	}
	ao {
		name = "SX AO";
		additional_instances = true;
		on_connect {
			if (sx_command(device, "L", 1)) {
				AO_GUIDE_DEC_PROPERTY->state = AO_GUIDE_RA_PROPERTY->state = INDIGO_OK_STATE;
				if (PRIVATE_DATA->response[0] & 0x05)
					AO_GUIDE_DEC_PROPERTY->state = INDIGO_ALERT_STATE;
				if (PRIVATE_DATA->response[0] & 0x0A)
					AO_GUIDE_RA_PROPERTY->state = INDIGO_ALERT_STATE;
			}
		}
		on_attach {
			AO_GUIDE_NORTH_ITEM->number.max = AO_GUIDE_SOUTH_ITEM->number.max = AO_GUIDE_EAST_ITEM->number.max = AO_GUIDE_WEST_ITEM->number.max = 50;
			INFO_PROPERTY->count = 6;
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
		}
		inherited AO_GUIDE_DEC {
			on_change {
				if (AO_GUIDE_NORTH_ITEM->number.value > 0) {
					sx_command(device, "GN%05d", 1, (int)AO_GUIDE_NORTH_ITEM->number.value);
				} else if (AO_GUIDE_SOUTH_ITEM->number.value > 0) {
					sx_command(device, "GS%05d", 1, (int)AO_GUIDE_SOUTH_ITEM->number.value);
				}
				AO_GUIDE_NORTH_ITEM->number.value = AO_GUIDE_SOUTH_ITEM->number.value = 0;
				if (PRIVATE_DATA->response[0] != 'G') {
					AO_GUIDE_DEC_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
		inherited AO_GUIDE_RA {
			on_change {
				if (AO_GUIDE_WEST_ITEM->number.value > 0) {
					sx_command(device, "GW%05d", 1, (int)AO_GUIDE_WEST_ITEM->number.value);
				} else if (AO_GUIDE_EAST_ITEM->number.value > 0) {
					sx_command(device, "GT%05d", 1, (int)AO_GUIDE_EAST_ITEM->number.value);
				}
				AO_GUIDE_WEST_ITEM->number.value = AO_GUIDE_EAST_ITEM->number.value = 0;
				if (PRIVATE_DATA->response[0] != 'G') {
					AO_GUIDE_RA_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
		inherited AO_RESET {
			on_change {
				if (AO_CENTER_ITEM->sw.value) {
					sx_command(device, "K", 1);
					AO_GUIDE_DEC_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, AO_GUIDE_DEC_PROPERTY, NULL);
					AO_GUIDE_RA_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, AO_GUIDE_RA_PROPERTY, NULL);
				} else if (AO_UNJAM_ITEM->sw.value) {
					sx_command(device, "R", 1);
					AO_GUIDE_DEC_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, AO_GUIDE_DEC_PROPERTY, NULL);
					AO_GUIDE_RA_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, AO_GUIDE_RA_PROPERTY, NULL);
				}
				AO_CENTER_ITEM->sw.value = AO_UNJAM_ITEM->sw.value = false;
				if (PRIVATE_DATA->response[0] != 'K') {
					AO_RESET_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
	}
	guider {
		name = "SX AO (guider)";
		inherited GUIDER_GUIDE_DEC {
			on_change {
				if (GUIDER_GUIDE_NORTH_ITEM->number.value > 0) {
					sx_command(device, "MN%05d", 1, (int)GUIDER_GUIDE_NORTH_ITEM->number.value / 10);
				} else if (GUIDER_GUIDE_SOUTH_ITEM->number.value > 0) {
					sx_command(device, "MS%05d", 1, (int)GUIDER_GUIDE_SOUTH_ITEM->number.value / 10);
				}
				GUIDER_GUIDE_NORTH_ITEM->number.value = GUIDER_GUIDE_SOUTH_ITEM->number.value = 0;
				if (PRIVATE_DATA->response[0] != 'M') {
					GUIDER_GUIDE_DEC_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
		inherited GUIDER_GUIDE_RA {
			on_change {
				if (AO_GUIDE_WEST_ITEM->number.value > 0) {
					sx_command(device, "MW%05d", 1, (int)AO_GUIDE_WEST_ITEM->number.value);
				} else if (AO_GUIDE_EAST_ITEM->number.value > 0) {
					sx_command(device, "MT%05d", 1, (int)AO_GUIDE_EAST_ITEM->number.value);
				}
				AO_GUIDE_WEST_ITEM->number.value = AO_GUIDE_EAST_ITEM->number.value = 0;
				if (PRIVATE_DATA->response[0] != 'M') {
					AO_GUIDE_RA_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
	}
}
