// Copyright (c) 2024-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// PegasusAstro FocusCube v3 Focuser driver definition

driver fc3 {
	label = "PegasusAstro FocusCube v3 Focuser";
	author = "Peter Polakovic <peter.polakovic@cloudmakers.eu>";
	copyright = "Copyright (c) 2024-2025 CloudMakers, s. r. o.";
	version = 3;
	serial;
	// include { }
	// define { }
	// data { }
	code {
		static bool fc3_command(indigo_device *device, char *command, char *response, int max) {
			if (indigo_uni_discard(PRIVATE_DATA->handle) >= 0) {
				if (indigo_uni_printf(PRIVATE_DATA->handle, "%s\n", command) > 0) {
					if (response != NULL) {
						if (indigo_uni_read_line(PRIVATE_DATA->handle, response, max) > 0) {
							return true;
						}
					} else {
						return true;
					}
				}
			}
			return false;
		}

		static bool fc3_open(indigo_device *device) {
			char response[128];
			PRIVATE_DATA->handle = indigo_uni_open_serial_with_speed(DEVICE_PORT_ITEM->text.value, 115200, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				if (fc3_command(device, "##", response, sizeof(response)) && !strncmp(response, "FC3_", 4)) {
					strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "FocusCube v3");
					if (fc3_command(device, "FV", response, sizeof(response)) && !strncmp(response, "FV:", 3)) {
						strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, response + 3);
					}
					indigo_update_property(device, INFO_PROPERTY, NULL);
					return true;
				}
				indigo_uni_close(&PRIVATE_DATA->handle);
				indigo_send_message(device, "Handshake failed");
			}
			return false;
		}

		static void fc3_close(indigo_device *device) {
			strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			indigo_update_property(device, INFO_PROPERTY, NULL);
			if (PRIVATE_DATA->handle != NULL) {
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
		}
	}
	// on_init { }
	// on_shutdown { }
	focuser {
		name = "Pegasus FocusCube3";
		additional_instances = true;
		// code { }
		on_timer {
			char response[32];
			bool update = false;
			if (fc3_command(device, "FA", response, sizeof(response)) && !strncmp(response, "FC3:", 4)) {
				char *pnt, *token = strtok_r(response, ":", &pnt);
				token = strtok_r(NULL, ":", &pnt); // position
				if (token) {
					int pos = atoi(token);
					if (FOCUSER_POSITION_ITEM->number.value != pos) {
						FOCUSER_POSITION_ITEM->number.value = pos;
						update = true;
					}
				}
				token = strtok_r(NULL, ":", &pnt); // is_running
				if (token) {
					if (*token == '0') {
						if (FOCUSER_POSITION_PROPERTY->state != INDIGO_OK_STATE) {
							FOCUSER_STEPS_PROPERTY->state = INDIGO_OK_STATE;
							FOCUSER_POSITION_PROPERTY->state = INDIGO_OK_STATE;
							update = true;
						}
					} else {
						if (FOCUSER_POSITION_PROPERTY->state != INDIGO_BUSY_STATE) {
							FOCUSER_POSITION_PROPERTY->state = INDIGO_BUSY_STATE;
							FOCUSER_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
							update = true;
						}
					}
				}
				token = strtok_r(NULL, ":", &pnt); // temperature
				if (token) {
					double temp = indigo_atod(token);
					if (FOCUSER_TEMPERATURE_ITEM->number.value != temp) {
						FOCUSER_TEMPERATURE_ITEM->number.value = temp;
						FOCUSER_TEMPERATURE_PROPERTY->state = INDIGO_OK_STATE;
						indigo_update_property(device, FOCUSER_TEMPERATURE_PROPERTY, NULL);
					}
				}
			}
			if (update) {
				indigo_update_property(device, FOCUSER_POSITION_PROPERTY, NULL);
				indigo_update_property(device, FOCUSER_STEPS_PROPERTY, NULL);
			}
			indigo_reschedule_timer(device, 1, &PRIVATE_DATA->focuser_timer);
		}
		on_connect {
			char response[64];
			if (fc3_command(device, "FA", response, sizeof(response)) && !strncmp(response, "FC3:", 4)) {
				char *pnt, *token = strtok_r(response, ":", &pnt);
				token = strtok_r(NULL, ":", &pnt); // position
				if (token) {
					FOCUSER_POSITION_ITEM->number.value = FOCUSER_POSITION_ITEM->number.target = atoi(token);
				}
				token = strtok_r(NULL, ":", &pnt); // is_running
				if (token) {
					FOCUSER_POSITION_PROPERTY->state = FOCUSER_STEPS_PROPERTY->state = *token == '1' ? INDIGO_BUSY_STATE : INDIGO_OK_STATE;
				}
				token = strtok_r(NULL, ":", &pnt); // temperature
				if (token) {
					FOCUSER_TEMPERATURE_ITEM->number.value = FOCUSER_TEMPERATURE_ITEM->number.target = indigo_atod(token);
				}
				token = strtok_r(NULL, ":", &pnt); // direction
				if (token) {
					indigo_set_switch(FOCUSER_REVERSE_MOTION_PROPERTY, *token == '1' ? FOCUSER_REVERSE_MOTION_ENABLED_ITEM : FOCUSER_REVERSE_MOTION_DISABLED_ITEM, true);
				}
				token = strtok_r(NULL, ":", &pnt);
				if (token) { // backlash
					FOCUSER_BACKLASH_ITEM->number.value = FOCUSER_BACKLASH_ITEM->number.target = atoi(token);
				}
			}
			if (fc3_command(device, "SP", response, sizeof(response)) && !strncmp(response, "SP:", 3)) {
				FOCUSER_SPEED_ITEM->number.value = FOCUSER_SPEED_ITEM->number.target = atoi(response + 3);
			}
		}
		on_disconnect {
			char response[64];
			fc3_command(device, "FH", response, sizeof(response));
		}
		// on_attach { }
		// on_detach { }
		inherited FOCUSER_BACKLASH {
			hidden = false;
			on_change {
				char command[16], response[64];
				snprintf(command, sizeof(command), "BL:%d", (int)FOCUSER_BACKLASH_ITEM->number.value);
				if (!fc3_command(device, command, response, sizeof(response))) {
					FOCUSER_BACKLASH_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			on_attach {
				FOCUSER_BACKLASH_ITEM->number.min = 0;
				FOCUSER_BACKLASH_ITEM->number.max = 9999;
				FOCUSER_BACKLASH_ITEM->number.target = FOCUSER_BACKLASH_ITEM->number.value = 100;
			}
			// on_detach { }
		}
		inherited INFO {
			// on_change { }
			on_attach {
				INFO_PROPERTY->count = 6;
				strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "Undefined");
			}
			// on_detach { }
		}
		inherited FOCUSER_REVERSE_MOTION {
			hidden = false;
			on_change {
				char command[16], response[64];
				snprintf(command, sizeof(command), "FD:%d", (int)FOCUSER_REVERSE_MOTION_DISABLED_ITEM->sw.value? 0 : 1);
				if (!fc3_command(device, command, response, sizeof(response))) {
					FOCUSER_REVERSE_MOTION_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			// on_attach { }
			// on_detach { }
		}
		inherited FOCUSER_TEMPERATURE {
			hidden = false;
			// on_change { }
			// on_attach { }
			// on_detach { }
		}
		inherited FOCUSER_SPEED {
			on_change {
				char command[16], response[64];
				snprintf(command, sizeof(command), "SP:%d", (int)FOCUSER_SPEED_ITEM->number.value);
				if (!fc3_command(device, command, response, sizeof(response))) {
					FOCUSER_SPEED_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			on_attach {
				FOCUSER_SPEED_ITEM->number.value = FOCUSER_SPEED_ITEM->number.target = 400;
				FOCUSER_SPEED_ITEM->number.min = 100;
				FOCUSER_SPEED_ITEM->number.max = 1000;
				FOCUSER_SPEED_ITEM->number.step = 1;
			}
			// on_detach { }
		}
		inherited FOCUSER_STEPS {
			on_change {
				char command[16];
				snprintf(command, sizeof(command), "FG:%d", (int)FOCUSER_STEPS_ITEM->number.value * (FOCUSER_DIRECTION_MOVE_INWARD_ITEM->sw.value ? -1 : 1));
				if (fc3_command(device, command, NULL, 0)) {
					FOCUSER_POSITION_PROPERTY->state = INDIGO_BUSY_STATE;
				} else {
					FOCUSER_STEPS_PROPERTY->state = INDIGO_ALERT_STATE;
					FOCUSER_POSITION_PROPERTY->state = INDIGO_ALERT_STATE;
				}
				indigo_update_property(device, FOCUSER_POSITION_PROPERTY, NULL);
			}
			on_attach {
				FOCUSER_STEPS_ITEM->number.min = 1;
				FOCUSER_STEPS_ITEM->number.max = 9999999;
				FOCUSER_STEPS_ITEM->number.step = 1;
			}
			// on_detach { }
		}
		inherited FOCUSER_ON_POSITION_SET {
			hidden = false;
			// on_change { }
			// on_attach { }
			// on_detach { }
		}
		inherited FOCUSER_POSITION {
			on_change {
				char command[16], response[64];
				if (FOCUSER_ON_POSITION_SET_GOTO_ITEM->sw.value) {
					snprintf(command, sizeof(command), "FM:%d", (int)FOCUSER_POSITION_ITEM->number.value);
					if (fc3_command(device, command, response, sizeof(response))) {
						FOCUSER_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
					} else {
						FOCUSER_POSITION_PROPERTY->state = INDIGO_ALERT_STATE;
						FOCUSER_STEPS_PROPERTY->state = INDIGO_ALERT_STATE;
					}
					indigo_update_property(device, FOCUSER_STEPS_PROPERTY, NULL);
				} else if (FOCUSER_ON_POSITION_SET_SYNC_ITEM->sw.value) {
					snprintf(command, sizeof(command), "FN:%d", (int)FOCUSER_POSITION_ITEM->number.value);
					if (!fc3_command(device, command, response, sizeof(response))) {
						FOCUSER_POSITION_PROPERTY->state = INDIGO_ALERT_STATE;
					}
				}
			}
			// on_attach { }
			// on_detach { }
		}
		inherited FOCUSER_ABORT_MOTION {
			on_change {
				char response[64];
				if (FOCUSER_ABORT_MOTION_ITEM->sw.value) {
					FOCUSER_ABORT_MOTION_ITEM->sw.value = false;
					if (fc3_command(device, "FH", response, sizeof(response))) {
						FOCUSER_ABORT_MOTION_PROPERTY->state = INDIGO_OK_STATE;
						FOCUSER_POSITION_PROPERTY->state = INDIGO_ALERT_STATE;
						FOCUSER_STEPS_PROPERTY->state = INDIGO_ALERT_STATE;
						indigo_update_property(device, FOCUSER_POSITION_PROPERTY, NULL);
						indigo_update_property(device, FOCUSER_STEPS_PROPERTY, NULL);
					} else {
						FOCUSER_ABORT_MOTION_PROPERTY->state = INDIGO_ALERT_STATE;
					}
				}
			}
			// on_attach { }
			// on_detach { }
		}
		inherited FOCUSER_DIRECTION {
			persistent = true;
			// on_change { }
			// on_attach { }
			// on_detach { }
		}
		inherited FOCUSER_LIMITS {
			persistent = true;
			// on_change { }
			// on_attach { }
			// on_detach { }
		}
	}
}
