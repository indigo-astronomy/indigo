// Copyright (c) 2019-2025 Rumen G. Bogdanovski
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// PegasusAstro FlatMaster driver definition

// version history
// 2.0 by Rumen G. Bogdanovski <rumenastro@gmail.com>
// 3.0 refactoring by Peter Polakovic <peter.polakovic@cloudmakers.eu>

driver flatmaster {
	label = "PegasusAstro FlatMaster";
	author = "Rumen G. Bogdanovski <rumenastro@gmail.com>";
	copyright = "Copyright (c) 2019-2025 Rumen G. Bogdanovski";
	version = 9;
	serial {
		pattern {
			vid = 0x0403;
			pid = 0x6015;
		}
	}
	define {
		#define INTENSITY(val) ((int)floor((100 - (int)(val) - 0) * (220 - 20) / (100 - 0) + 20))
	}
	data {
		char response[12];
	}
	code {
		static bool flatmaster_command(indigo_device *device, char *command, ...) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				va_list args;
				va_start(args, command);
				result = indigo_uni_vtprintf(PRIVATE_DATA->handle, command, args, "\n");
				va_end(args);
				if (result > 0) {
					result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\n", "\r\n", INDIGO_DELAY(1));
				}
			}
			return result > 0;
		}

		static bool flatmaster_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial(DEVICE_PORT_ITEM->text.value, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				if (flatmaster_command(device, "#") && !strcmp("OK_FM", PRIVATE_DATA->response)) {
					if (flatmaster_command(device, "V")) {
						INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, DRIVER_LABEL);
						INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, PRIVATE_DATA->response);
						indigo_update_property(device, INFO_PROPERTY, NULL);
						return true;
					}
				}
				indigo_uni_close(&PRIVATE_DATA->handle);
				indigo_send_message(device, "Handshake failed");
			}
			return false;
		}

		static void flatmaster_close(indigo_device *device) {
			flatmaster_command(device, "E:0");
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			indigo_update_property(device, INFO_PROPERTY, NULL);
			indigo_uni_close(&PRIVATE_DATA->handle);
		}
	}
	aux {
		name = "PegasusAstro FlatMaster";
		interface = INDIGO_INTERFACE_AUX_LIGHTBOX;
		additional_instances = true;
		on_connect {
			/* FlatMaster does not report intensity and ON/OFF state, so we set it to be consistent */
			if (flatmaster_command(device, "L:%d", INTENSITY(AUX_LIGHT_INTENSITY_ITEM->number.value))) {
				AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_OK_STATE;
			} else {
				AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
			}
			if (flatmaster_command(device, "E:%d", AUX_LIGHT_SWITCH_ON_ITEM->sw.value)) {
				AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_OK_STATE;
			} else {
				AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
			}
		}
		on_disconnect {
			flatmaster_command(device, "L:%d", INTENSITY(0));
			flatmaster_command(device, "E:0");
		}
		on_attach {
			INFO_PROPERTY->count = 6;
			INDIGO_COPY_VALUE(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			INDIGO_COPY_VALUE(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
		}
		switch AUX_LIGHT_SWITCH {
			name = AUX_LIGHT_SWITCH_PROPERTY_NAME;
			group = AUX_MAIN_GROUP;
			label = "Light (on/off)";
			persistent = true;
			on_change {
				char command[12];
				// if light is ON, set intensity, otherwise set it to 0
				if (AUX_LIGHT_SWITCH_ON_ITEM->sw.value) {
					sprintf(command, "L:%d", INTENSITY(AUX_LIGHT_INTENSITY_ITEM->number.value));
				} else {
					sprintf(command, "L:%d", INTENSITY(0));
				}
				if (flatmaster_command(device, command)) {
					AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_OK_STATE;
				} else {
					AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
				}
				indigo_update_property(device, AUX_LIGHT_INTENSITY_PROPERTY, NULL);

				if (!flatmaster_command(device, "E:%d", AUX_LIGHT_SWITCH_ON_ITEM->sw.value)) {
					AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			item AUX_LIGHT_SWITCH_ON {
				name = AUX_LIGHT_SWITCH_ON_ITEM_NAME;
				label = "On";
				value = false;
			}
			item AUX_LIGHT_SWITCH_OFF {
				name = AUX_LIGHT_SWITCH_OFF_ITEM_NAME;
				label = "Off";
				value = true;
			}
		}
		number AUX_LIGHT_INTENSITY {
			name = AUX_LIGHT_INTENSITY_PROPERTY_NAME;
			group = AUX_MAIN_GROUP;
			label = "Light intensity";
			persistent = true;
			on_change {
				// if light is OFF, do not set intensity
				AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_OK_STATE;
				if (AUX_LIGHT_SWITCH_ON_ITEM->sw.value) {
					if (!flatmaster_command(device, "L:%d", INTENSITY(AUX_LIGHT_INTENSITY_ITEM->number.value))) {
						AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
					}
				}
			}
			item AUX_LIGHT_INTENSITY {
				name = AUX_LIGHT_INTENSITY_ITEM_NAME;
				label = "Intensity (%)";
				value = 50;
				max = 100;
				step = 1;
				format = "%g";
			}
		}
	}
}
