// Copyright (c) 2019-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Artesky Flat Box USB driver definition

driver arteskyflat {
	label = "Artesky Flat Box USB";
	author = "Peter Polakovic";
	copyright = "Copyright (c) 2019-2025 CloudMakers, s. r. o.";
	version = 7;
	serial;
	data {
		char response[16];
	}
	code {
		static bool arteskyflat_command(indigo_device *device, char *command, ...) {
			long result = indigo_uni_discard(PRIVATE_DATA->handle);
			if (result >= 0) {
				va_list args;
				va_start(args, command);
				result = indigo_uni_vprintf(PRIVATE_DATA->handle, command, args);
				va_end(args);
				if (result > 0) {
					result = indigo_uni_read_section(PRIVATE_DATA->handle, PRIVATE_DATA->response, sizeof(PRIVATE_DATA->response), "\n", "\r\n", INDIGO_DELAY(1));
				}
			}
			return result > 0;
		}

		static bool arteskyflat_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial(DEVICE_PORT_ITEM->text.value, INDIGO_LOG_DEBUG);
			return PRIVATE_DATA->handle != NULL;
		}

		static void arteskyflat_close(indigo_device *device) {
			indigo_uni_close(&PRIVATE_DATA->handle);
		}
	}
	aux {
		name = "Artesky Flat Box";
		interface = INDIGO_INTERFACE_AUX_LIGHTBOX;
		additional_instances = true;
		switch AUX_LIGHT_SWITCH {
			name = AUX_LIGHT_SWITCH_PROPERTY_NAME;
			group = AUX_MAIN_GROUP;
			label = "Light (on/off)";
			on_change {
				if (!arteskyflat_command(device, AUX_LIGHT_SWITCH_ON_ITEM->sw.value ? ">L000\n" : ">D000\n") || PRIVATE_DATA->response[0] != '*') {
					AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			item AUX_LIGHT_SWITCH_ON {
				name = AUX_LIGHT_SWITCH_ON_ITEM_NAME;
				label = "On";
				value = false;
			}
			item AUX_LIGHT_SWITCH_OFF {
				name = AUX_LIGHT_SWITCH_OFF_ITEM_NAME;
				label = "Off";
				value = true;
			}
		}
		number AUX_LIGHT_INTENSITY {
			name = AUX_LIGHT_INTENSITY_PROPERTY_NAME;
			group = AUX_MAIN_GROUP;
			label = "Light intensity";
			persistent = true;
			on_change {
				if (!arteskyflat_command(device, ">B%03d\n", (int)(255 * AUX_LIGHT_INTENSITY_ITEM->number.value / 100)) || PRIVATE_DATA->response[0] != '*') {
					AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
			item AUX_LIGHT_INTENSITY {
				name = AUX_LIGHT_INTENSITY_ITEM_NAME;
				label = "Intensity [%]";
				value = 0;
				max = 100;
				step = 1;
				format = "%.0f";
			}
		}
	}
}
