// Copyright (c) 2019-2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Artesky Flat Box USB driver definition

driver arteskyflat {
	author = "Peter Polakovic";
	copyright = "Copyright (c) 2019-2025 CloudMakers, s. r. o.";
	label = "Artesky Flat Box USB";
	version = 7;
	serial;
	
	// Shared code
	
	code {
		static bool arteskyflat_command(indigo_device *device, char *command, char *response) {
			if (indigo_uni_discard(PRIVATE_DATA->handle) >= 0) {
				if (indigo_uni_printf(PRIVATE_DATA->handle, "%s\n", command) > 0) {
					if (indigo_uni_read_section(PRIVATE_DATA->handle, response, 16, "\n", "\r\n", INDIGO_DELAY(1)) > 0) {
						return true;
					}
				}
			}
			return false;
		}

		static bool arteskyflat_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial(DEVICE_PORT_ITEM->text.value, INDIGO_LOG_DEBUG);
			return PRIVATE_DATA->handle != NULL;
		}
		
		static void arteskyflat_close(indigo_device *device) {
			if (PRIVATE_DATA->handle != NULL) {
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
		}
	}
	
	// AUX definition
	
	aux {
		name = "Artesky Flat Box";
		additional_instances = true;
		interface = INDIGO_INTERFACE_AUX_LIGHTBOX;
		inherited CONNECTION {
		}
		switch AUX_LIGHT_SWITCH {
			label = "Light (on/off)";
			group = AUX_MAIN_GROUP;
			item AUX_LIGHT_SWITCH_ON {
				label = "On";
				value = false;
			}
			item AUX_LIGHT_SWITCH_OFF {
				label = "Off";
				value = true;
			}
			change {
				char command[16],	response[16];
				strcpy(command, AUX_LIGHT_SWITCH_ON_ITEM->sw.value ? ">L000" : ">D000");
				if (!arteskyflat_command(device, command, response) || *response != '*') {
					AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
		number AUX_LIGHT_INTENSITY {
			label = "Light intensity";
			group = AUX_MAIN_GROUP;
			persistent = true;
			item AUX_LIGHT_INTENSITY {
				label = "Intensity";
				min = 0;
				max = 255;
				step = 1;
				value = 0;
				format = "%d";
			}
			change {
				char command[16],	response[16];
				sprintf(command, ">B%03d", (int)(AUX_LIGHT_INTENSITY_ITEM->number.value));
				if (!arteskyflat_command(device, command, response) || *response != '*') {
					AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
	}
}

