// Copyright (c) 2021-2025 Rumen G. Bogdanovski
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Geoptik flat field generator driver definition

driver geoptikflat {
	author = "Rumen G. Bogdanovski";
	copyright = "Copyright (c) 2021-2025 Rumen G. Bogdanovski";
	label = "Geoptik flat field generato";
	version = 5;
	serial;
	
	define {
		#define INTENSITY(val) (int)(val / 100.0 * 255)
	}

	// Shared code
	
	code {
		static bool geoptikflat_command(indigo_uni_handle *handle, char *command, char *response) {
			if (indigo_uni_discard(handle) >= 0) {
				if (indigo_uni_printf(handle, "%s\r", command) > 0) {
					if (indigo_uni_read_section(handle, response, 16, "\n", "\n", INDIGO_DELAY(1)) > 0) {
						return true;
					}
				}
			}
			return false;
		}

		static bool geoptikflat_open(indigo_device *device) {
			PRIVATE_DATA->handle = indigo_uni_open_serial(DEVICE_PORT_ITEM->text.value, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				char response[16];
				if (geoptikflat_command(PRIVATE_DATA->handle, ">POOO", response) && !strncmp(response, "*P", 2)) {
					return true;
				} else {
					INDIGO_DRIVER_ERROR(DRIVER_NAME, "Handshake failed");
					indigo_uni_close(&PRIVATE_DATA->handle);
				}
			}
			return false;
		}

		static void geoptikflat_close(indigo_device *device) {
			indigo_uni_close(&PRIVATE_DATA->handle);
		}
	}

	// AUX definition
	
	aux {
		name = "Geoptik Flat Generator";
		additional_instances = true;
		interface = INDIGO_INTERFACE_AUX_LIGHTBOX;
		on_connect {
			char command[16],	response[16];
			if (geoptikflat_command(PRIVATE_DATA->handle, ">VOOO", response)) {
				snprintf(INFO_DEVICE_FW_REVISION_ITEM->text.value, INDIGO_VALUE_SIZE, "%s", response);
				indigo_update_property(device, INFO_PROPERTY, NULL);
			}
			sprintf(command, ">B%03d", INTENSITY(AUX_LIGHT_INTENSITY_ITEM->number.value));
			if (geoptikflat_command(PRIVATE_DATA->handle, command, response) && !strncmp(response, "*B", 2)) {
				AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_OK_STATE;
			} else {
				AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
			}
			if (geoptikflat_command(PRIVATE_DATA->handle, AUX_LIGHT_SWITCH_ON_ITEM->sw.value ? ">LOOO" : ">DOOO", response) && !strncmp(response, AUX_LIGHT_SWITCH_ON_ITEM->sw.value ? "*L" : "*D", 2)) {
				AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_OK_STATE;
			} else {
				AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
			}
		}
		switch AUX_LIGHT_SWITCH {
			label = "Light (on/off)";
			group = AUX_MAIN_GROUP;
			persistent = true;
			item AUX_LIGHT_SWITCH_ON {
				label = "On";
			}
			item AUX_LIGHT_SWITCH_OFF {
				label = "Off";
				value = true;
			}
			on_change {
				char response[16];
				if (!geoptikflat_command(PRIVATE_DATA->handle, AUX_LIGHT_SWITCH_ON_ITEM->sw.value ? ">LOOO" : ">DOOO", response) || strncmp(response, AUX_LIGHT_SWITCH_ON_ITEM->sw.value ? "*L" : "*D", 2)) {
					AUX_LIGHT_SWITCH_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
		number AUX_LIGHT_INTENSITY {
			label = "Light intensity";
			group = AUX_MAIN_GROUP;
			persistent = true;
			item AUX_LIGHT_INTENSITY {
				label = "Intensity (%)";
				format = "%g";
				max = 100;
				step = 1;
				value = 50;
			}
			on_change {
				char command[16],	response[16];
				sprintf(command, ">B%03d", INTENSITY(AUX_LIGHT_INTENSITY_ITEM->number.value));
				if (!geoptikflat_command(PRIVATE_DATA->handle, command, response) || strncmp(response, "*B", 2)) {
					AUX_LIGHT_INTENSITY_PROPERTY->state = INDIGO_ALERT_STATE;
				}
			}
		}
		on_attach {
			INFO_PROPERTY->count = 6;
		}
	}
}
