// Copyright (c) 2025 CloudMakers, s. r. o.
// All rights reserved.
//
// You can use this software under the terms of 'INDIGO Astronomy
// open-source license' (see LICENSE.md).
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS 'AS IS' AND ANY EXPRESS
// OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// PegasusAstro UPB v3 aux driver definition

driver upb3 {
	author = "Peter Polakovic <peter.polakovic@cloudmakers.eu>";
	copyright = "Copyright (c) 2025 CloudMakers, s. r. o.";
	label = "PegasusAstro Ultimate Powerbox v3";
	version = 2;
	aux {
		name = "Ultimate Powerbox 3";
		interface = INDIGO_INTERFACE_AUX_POWERBOX | INDIGO_INTERFACE_AUX_WEATHER;
		additional_instances = true;
		inherited CONNECTION {
			change {
				if (upb_command(device, "PA", response, sizeof(response))) {
					char *pnt, *token = strtok_r(response, ":", &pnt);
					for (int i = 0; i < 6; i++) { // output 1-6
						indigo_item *item = AUX_POWER_OUTLET_PROPERTY->items + i;
						if ((token = strtok_r(NULL, ":", &pnt))) {
							bool value = atoi(token) > 0;
							if (item->sw.value != value) {
								item->sw.value = value;
							}
						}
					}
					for (int i = 0; i < 3; i++) { // dew 1-3
						indigo_item *item = AUX_HEATER_OUTLET_PROPERTY->items + i;
						if ((token = strtok_r(NULL, ":", &pnt))) {
							int value = atoi(token);
							if (item->number.value != value) {
								item->number.value = value;
							}
						}
					}
					for (int i = 6; i < 9; i++) { // buck, boost, relay
						indigo_item *item = AUX_POWER_OUTLET_PROPERTY->items + i;
						if ((token = strtok_r(NULL, ":", &pnt))) {
							bool value = *token == '1';
							if (item->sw.value != value) {
								item->sw.value = value;
							}
						}
					}
				}
				if (upb_command(device, "AJ", response, sizeof(response))) {
					char *pnt, *token = strtok_r(response, ":", &pnt);
					if ((token = strtok_r(NULL, ":", &pnt))) { // Buck voltage
						int value = atoi(token);
						if (X_AUX_VARIABLE_POWER_OUTLET_7_ITEM->number.value != value) {
							X_AUX_VARIABLE_POWER_OUTLET_7_ITEM->number.target = X_AUX_VARIABLE_POWER_OUTLET_7_ITEM->number.value = value;
						}
					}
					if ((token = strtok_r(NULL, ":", &pnt))) { // Buck status
						AUX_POWER_OUTLET_7_ITEM->sw.value = *token == '1';
					}
					if ((token = strtok_r(NULL, ":", &pnt))) { // Boost voltage
						X_AUX_VARIABLE_POWER_OUTLET_8_ITEM->number.target = X_AUX_VARIABLE_POWER_OUTLET_8_ITEM->number.value = atoi(token);
					}
					if ((token = strtok_r(NULL, ":", &pnt))) { // Boost status
						AUX_POWER_OUTLET_8_ITEM->sw.value = *token == '1';
					}
				}
				if (upb_command(device, "UA", response, sizeof(response))) {
					char *pnt, *token = strtok_r(response, ":", &pnt);
					for (int i = 0; i < 8; i++) { // usb 1-8
						indigo_item *item = AUX_USB_PORT_PROPERTY->items + i;
						if ((token = strtok_r(NULL, ":", &pnt))) {
							bool value = *token == '1';
							if (item->sw.value != value) {
								item->sw.value = value;
							}
						}
					}
				}
				if (upb_command(device, "PD", response, sizeof(response))) {
					if (!strcmp(response, "PD:000")) {
						if (AUX_DEW_CONTROL_MANUAL_ITEM->sw.value) {
							indigo_set_switch(AUX_DEW_CONTROL_PROPERTY, AUX_DEW_CONTROL_MANUAL_ITEM, true);
						}
					} else {
						if (AUX_DEW_CONTROL_AUTOMATIC_ITEM->sw.value) {
							indigo_set_switch(AUX_DEW_CONTROL_PROPERTY, AUX_DEW_CONTROL_AUTOMATIC_ITEM, true);
						}
					}
				}
			}
		}
		text AUX_OUTLET_NAMES {
			label = "Outlet names";
			group = POWERBOX_GROUP;
			always_defined = true;
			item AUX_POWER_OUTLET_NAME_1 {
				label = "Outlet #1";
				value = "Outlet #1";
			}
			item AUX_POWER_OUTLET_NAME_2 {
				label = "Outlet #2";
				value = "Outlet #2";
			}
			item AUX_POWER_OUTLET_NAME_3 {
				label = "Outlet #3";
				value = "Outlet #3";
			}
			item AUX_POWER_OUTLET_NAME_4 {
				label = "Outlet #4";
				value = "Outlet #4";
			}
			item AUX_POWER_OUTLET_NAME_5 {
				label = "Outlet #5";
				value = "Outlet #5";
			}
			item AUX_POWER_OUTLET_NAME_6 {
				label = "Outlet #6";
				value = "Outlet #6";
			}
			item AUX_POWER_OUTLET_NAME_7 {
				label = "Outlet #7";
				value = "Outlet #7";
			}
			item AUX_POWER_OUTLET_NAME_8 {
				label = "Outlet #8";
				value = "Outlet #8";
			}
			item AUX_POWER_OUTLET_NAME_9 {
				label = "Outlet #9";
				value = "Outlet #9";
			}
			item AUX_HEATER_OUTLET_NAME_1 {
				label = "Heater #1";
				value = "Heater #1";
			}
			item AUX_HEATER_OUTLET_NAME_2 {
				label = "Heater #2";
				value = "Heater #2";
			}
			item AUX_HEATER_OUTLET_NAME_3 {
				label = "Heater #3";
				value = "Heater #3";
			}
			item AUX_USB_PORT_NAME_1 {
				label = "Port #1";
				value = "Port #1";
			}
			item AUX_USB_PORT_NAME_2 {
				label = "Port #2";
				value = "Port #2";
			}
			item AUX_USB_PORT_NAME_3 {
				label = "Port #3";
				value = "Port #3";
			}
			item AUX_USB_PORT_NAME_4 {
				label = "Port #4";
				value = "Port #4";
			}
			item AUX_USB_PORT_NAME_5 {
				label = "Port #5";
				value = "Port #5";
			}
			item AUX_USB_PORT_NAME_6 {
				label = "Port #6";
				value = "Port #6";
			}
			item AUX_USB_PORT_NAME_7 {
				label = "Port #7";
				value = "Port #7";
			}
			item AUX_USB_PORT_NAME_8 {
				label = "Port #8";
				value = "Port #8";
			}
			change {
				snprintf(AUX_POWER_OUTLET_1_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_1_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_2_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_2_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_3_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_3_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_4_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_4_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_5_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_5_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_6_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_6_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_7_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_7_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_8_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_8_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_9_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_POWER_OUTLET_NAME_9_ITEM->text.value);
				snprintf(AUX_HEATER_OUTLET_1_ITEM->label, INDIGO_NAME_SIZE, "%s [%%]", AUX_HEATER_OUTLET_NAME_1_ITEM->text.value);
				snprintf(AUX_HEATER_OUTLET_2_ITEM->label, INDIGO_NAME_SIZE, "%s [%%]", AUX_HEATER_OUTLET_NAME_2_ITEM->text.value);
				snprintf(AUX_HEATER_OUTLET_3_ITEM->label, INDIGO_NAME_SIZE, "%s [%%]", AUX_HEATER_OUTLET_NAME_3_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_STATE_1_ITEM->label, INDIGO_NAME_SIZE, "%s state", AUX_POWER_OUTLET_NAME_1_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_STATE_2_ITEM->label, INDIGO_NAME_SIZE, "%s state", AUX_POWER_OUTLET_NAME_2_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_STATE_3_ITEM->label, INDIGO_NAME_SIZE, "%s state", AUX_POWER_OUTLET_NAME_3_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_STATE_4_ITEM->label, INDIGO_NAME_SIZE, "%s state", AUX_POWER_OUTLET_NAME_4_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_STATE_5_ITEM->label, INDIGO_NAME_SIZE, "%s state", AUX_POWER_OUTLET_NAME_5_ITEM->text.value);
				snprintf(AUX_POWER_OUTLET_STATE_6_ITEM->label, INDIGO_NAME_SIZE, "%s state", AUX_POWER_OUTLET_NAME_6_ITEM->text.value);
				snprintf(AUX_USB_PORT_1_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_1_ITEM->text.value);
				snprintf(AUX_USB_PORT_2_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_2_ITEM->text.value);
				snprintf(AUX_USB_PORT_3_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_3_ITEM->text.value);
				snprintf(AUX_USB_PORT_4_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_4_ITEM->text.value);
				snprintf(AUX_USB_PORT_5_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_5_ITEM->text.value);
				snprintf(AUX_USB_PORT_6_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_6_ITEM->text.value);
				snprintf(AUX_USB_PORT_7_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_6_ITEM->text.value);
				snprintf(AUX_USB_PORT_8_ITEM->label, INDIGO_NAME_SIZE, "%s", AUX_USB_PORT_NAME_6_ITEM->text.value);
				if (IS_CONNECTED) {
					indigo_delete_property(device, AUX_POWER_OUTLET_PROPERTY, NULL);
					indigo_delete_property(device, AUX_HEATER_OUTLET_PROPERTY, NULL);
					indigo_delete_property(device, AUX_POWER_OUTLET_STATE_PROPERTY, NULL);
					indigo_delete_property(device, AUX_USB_PORT_PROPERTY, NULL);
					indigo_define_property(device, AUX_POWER_OUTLET_PROPERTY, NULL);
					indigo_define_property(device, AUX_HEATER_OUTLET_PROPERTY, NULL);
					indigo_define_property(device, AUX_POWER_OUTLET_STATE_PROPERTY, NULL);
					indigo_define_property(device, AUX_USB_PORT_PROPERTY, NULL);
					indigo_update_property(device, AUX_OUTLET_NAMES_PROPERTY, NULL);
				}
			}
		}
		switch AUX_POWER_OUTLET {
			label = "Power outlets";
			group = POWERBOX_GROUP;
			rule = INDIGO_ANY_OF_MANY_RULE;
			item AUX_POWER_OUTLET_1 {
				label = "Outlet #1";
				value = true;
			}
			item AUX_POWER_OUTLET_2 {
				label = "Outlet #2";
				value = true;
			}
			item AUX_POWER_OUTLET_3 {
				label = "Outlet #3";
				value = true;
			}
			item AUX_POWER_OUTLET_4 {
				label = "Outlet #4";
				value = true;
			}
			item AUX_POWER_OUTLET_5 {
				label = "Outlet #5";
				value = true;
			}
			item AUX_POWER_OUTLET_6 {
				label = "Outlet #6";
				value = true;
			}
			item AUX_POWER_OUTLET_7 {
				label = "Buck output";
				value = true;
			}
			item AUX_POWER_OUTLET_8 {
				label = "Boost output";
				value = true;
			}
			item AUX_POWER_OUTLET_9 {
				label = "Relay switch";
				value = true;
			}
			change {
				char response[128];
				upb3_command(device, AUX_POWER_OUTLET_1_ITEM->sw.value ? "P1:100" : "P1:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_2_ITEM->sw.value ? "P2:100" : "P2:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_3_ITEM->sw.value ? "P3:100" : "P3:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_4_ITEM->sw.value ? "P4:100" : "P4:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_5_ITEM->sw.value ? "P5:100" : "P5:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_6_ITEM->sw.value ? "P6:100" : "P6:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_7_ITEM->sw.value ? "PJ:1" : "PJ:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_8_ITEM->sw.value ? "PB:1" : "PB:0", response, sizeof(response));
				upb3_command(device, AUX_POWER_OUTLET_9_ITEM->sw.value ? "RL:1" : "RL:0", response, sizeof(response));
			}
		}
		light AUX_POWER_OUTLET_STATE {
			label = "Power outlets state";
			group = POWERBOX_GROUP;
			item AUX_POWER_OUTLET_STATE_1 {
				label = "Outlet #1 state";
				value = INDIGO_OK_STATE;
			}
			item AUX_POWER_OUTLET_STATE_2 {
				label = "Outlet #2 state";
				value = INDIGO_OK_STATE;
			}
			item AUX_POWER_OUTLET_STATE_3 {
				label = "Outlet #3 state";
				value = INDIGO_OK_STATE;
			}
			item AUX_POWER_OUTLET_STATE_4 {
				label = "Outlet #4 state";
				value = INDIGO_OK_STATE;
			}
			item AUX_POWER_OUTLET_STATE_5 {
				label = "Outlet #5 state";
				value = INDIGO_OK_STATE;
			}
			item AUX_POWER_OUTLET_STATE_6 {
				label = "Outlet #6 state";
				value = INDIGO_OK_STATE;
			}
		}
		number AUX_HEATER_OUTLET {
			label = "Heater outlets";
			group = POWERBOX_GROUP;
			item AUX_HEATER_OUTLET_1 {
				label = "Heater #1 [%]";
				max = 100;
				step = 5;
			}
			item AUX_HEATER_OUTLET_2 {
				label = "Heater #2 [%]";
				max = 100;
				step = 5;
			}
			item AUX_HEATER_OUTLET_3 {
				label = "Heater #3 [%]";
				max = 100;
				step = 5;
			}
			change {
				char command[16], response[128];
				sprintf(command, "D1:%d", (int)AUX_HEATER_OUTLET_1_ITEM->number.value);
				upb3_command(device, command, response, sizeof(response));
				sprintf(command, "D2:%d", (int)AUX_HEATER_OUTLET_2_ITEM->number.value);
				upb3_command(device, command, response, sizeof(response));
				sprintf(command, "D3:%d", (int)AUX_HEATER_OUTLET_3_ITEM->number.value);
				upb3_command(device, command, response, sizeof(response));
			}
		}
		switch AUX_DEW_CONTROL {
			label = "Dew control";
			group = POWERBOX_GROUP;
			item AUX_DEW_CONTROL_MANUAL {
				label = "Manual";
				value = true;
			}
			item AUX_DEW_CONTROL_AUTOMATIC {
				label = "Automatic";
				value = true;
			}
			change {
				char response[128];
				if (AUX_DEW_CONTROL_AUTOMATIC_ITEM->sw.value) {
					upb3_command(device, "ADW1:1", response, sizeof(response));
					upb3_command(device, "ADW2:1", response, sizeof(response));
					upb3_command(device, "ADW3:1", response, sizeof(response));
					upb3_command(device, "DA:5", response, sizeof(response));
				} else {
					upb3_command(device, "ADW1:0", response, sizeof(response));
					upb3_command(device, "ADW2:0", response, sizeof(response));
					upb3_command(device, "ADW3:0", response, sizeof(response));
				}
			}
		}
		switch AUX_USB_PORT {
			label = "USB ports";
			group = POWERBOX_GROUP;
			rule = INDIGO_ANY_OF_MANY_RULE;
			item AUX_USB_PORT_1 {
				label = "Port #1";
				value = true;
			}
			item AUX_USB_PORT_2 {
				label = "Port #2";
				value = true;
			}
			item AUX_USB_PORT_3 {
				label = "Port #3";
				value = true;
			}
			item AUX_USB_PORT_4 {
				label = "Port #4";
				value = true;
			}
			item AUX_USB_PORT_5 {
				label = "Port #5";
				value = true;
			}
			item AUX_USB_PORT_6 {
				label = "Port #6";
				value = true;
			}
			change {
				char command[16], response[128];
				for (int i = 0; i < AUX_USB_PORT_PROPERTY->count; i++) {
					sprintf(command, "U%d:%d", i + 1, AUX_USB_PORT_PROPERTY->items[i].sw.value ? 1 : 0);
					upb3_command(device, command, response, sizeof(response));
				}
			}
		}
		number AUX_WEATHER {
			label = "Weather info";
			group = POWERBOX_GROUP;
			perm = INDIGO_RO_PERM;
			item AUX_WEATHER_TEMPERATURE {
				label = "Temperature [C]";
				min = -50;
				max = 100;
			}
			item AUX_WEATHER_HUMIDITY {
				label = "Humidity [%]";
				max = 100;
			}
			item AUX_WEATHER_DEWPOINT {
				label = "Dewpoint [C]";
				min = -50;
				max = 100;
			}
		}
		number AUX_INFO {
			label = "Sensors";
			group = POWERBOX_GROUP;
			perm = INDIGO_RO_PERM;
			item X_AUX_AVERAGE {
				label = "Avereage current [A]";
				name = "X_AUX_AVERAGE";
				min = 0;
				max = 100;
			}
			item X_AUX_AMP_HOUR {
				label = "Amp-hour [Ah]";
				name = "X_AUX_AMP_HOUR";
				max = 100;
			}
			item X_AUX_WATT_HOUR {
				label = "Watt-hour [Wh]";
				name = "X_AUX_WATT_HOUR";
				max = 100;
			}
			item AUX_INFO_VOLTAGE {
				label = "Voltage [V]";
				max = 15;
			}
			item AUX_INFO_CURRENT {
				label = "Current [A]";
				max = 20;
			}
		}
		switch AUX_SAVE_OUTLET_STATES_AS_DEFAULT {
			label = "Save current outlet states as default";
			group = POWERBOX_GROUP;
			item AUX_SAVE_OUTLET_STATES_AS_DEFAULT {
				label = "Save";
			}
			change {
				char response[128];
				if (AUX_SAVE_OUTLET_STATES_AS_DEFAULT_ITEM->sw.value) {
					upb3_command(device, "PS", response, sizeof(response));
					upb3_command(device, "US", response, sizeof(response));
					upb3_command(device, "DSTR", response, sizeof(response));
					AUX_SAVE_OUTLET_STATES_AS_DEFAULT_ITEM->sw.value = false;
				}
			}
		}
		switch X_AUX_REBOOT {
			label = "Reboot";
			name = "X_AUX_REBOOT";
			group = POWERBOX_GROUP;
			item X_AUX_REBOOT {
				label = "Manual";
				name = "REBOOT";
			}
			change {
				char response[128];
				if (X_AUX_REBOOT_ITEM->sw.value) {
					upb3_command(device, "PF", response, sizeof(response));
					X_AUX_REBOOT_ITEM->sw.value = false;
				}
			}
		}
		number X_AUX_VARIABLE_POWER_OUTLET {
			label = "Variable voltage power outlets";
			group = POWERBOX_GROUP;
			item X_AUX_VARIABLE_POWER_OUTLET_7 {
				label = "Voltage of adjustable buck output";
				name = "OUTLET_7";
				min = 3;
				max = 12;
				step = 1;
				value = 3;
			}
			item X_AUX_VARIABLE_POWER_OUTLET_8 {
				label = "Voltage of adjustable boost output";
				name = "OUTLET_7";
				min = 12;
				max = 24;
				step = 1;
				value = 12;
			}
			change {
				char response[128], command[32];
				sprintf(command, "PJ:%d", (int)X_AUX_VARIABLE_POWER_OUTLET_7_ITEM->number.value);
				upb3_command(device, command, response, sizeof(response));
				sprintf(command, "PB:%d", (int)X_AUX_VARIABLE_POWER_OUTLET_8_ITEM->number.value);
				upb3_command(device, command, response, sizeof(response));
			}
		}
		timer {
			char response[128];
			bool updatePowerOutletState = false;
			bool updateWeather = false;
			bool updateInfo = false;
			if (upb3_command(device, "IS", response, sizeof(response))) {
				char *pnt, *token = strtok_r(response, ":", &pnt);
				for (int i = 0; i < 6; i++) { // power 1-6
					indigo_item *item = AUX_POWER_OUTLET_STATE_PROPERTY->items + i;
					if ((token = strtok_r(NULL, ":", &pnt))) {
						bool value = *token == '1';
						if (value && item->light.value != INDIGO_ALERT_STATE) {
							updatePowerOutletState = true;
							item->light.value = INDIGO_ALERT_STATE;
						} else if (!value && item->light.value == INDIGO_ALERT_STATE) {
							updatePowerOutletState = true;
							item->light.value = AUX_POWER_OUTLET_PROPERTY->items[i].sw.value ? INDIGO_OK_STATE : INDIGO_IDLE_STATE;
						} else if (!value) {
							if (AUX_POWER_OUTLET_PROPERTY->items[i].sw.value) {
								if (item->light.value != INDIGO_OK_STATE) {
									item->light.value = INDIGO_OK_STATE;
									updatePowerOutletState = true;
								}
							} else {
								if (item->light.value != INDIGO_IDLE_STATE) {
									item->light.value = INDIGO_IDLE_STATE;
									updatePowerOutletState = true;
								}
							}
						}
					}
				}
			}
			if (upb3_command(device, "ES", response, sizeof(response))) {
				char *pnt, *token = strtok_r(response, ":", &pnt);
				if ((token = strtok_r(NULL, ":", &pnt))) { // Temp
					double value = indigo_atod(token);
					if (AUX_WEATHER_TEMPERATURE_ITEM->number.value != value) {
						updateWeather = true;
						AUX_WEATHER_TEMPERATURE_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Humidity
					double value = indigo_atod(token);
					if (AUX_WEATHER_HUMIDITY_ITEM->number.value != value) {
						updateWeather = true;
						AUX_WEATHER_HUMIDITY_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Dewpoint
					double value = indigo_atod(token);
					if (AUX_WEATHER_DEWPOINT_ITEM->number.value != value) {
						updateWeather = true;
						AUX_WEATHER_DEWPOINT_ITEM->number.value = value;
					}
				}
			}
			if (upb3_command(device, "VR", response, sizeof(response))) {
				char *pnt, *token = strtok_r(response, ":", &pnt);
				if ((token = strtok_r(NULL, ":", &pnt))) { // Voltage
					double value = indigo_atod(token);
					if (AUX_INFO_VOLTAGE_ITEM->number.value != value) {
						updateInfo = true;
						AUX_INFO_VOLTAGE_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) { // Current
					double value = indigo_atod(token);
					if (AUX_INFO_CURRENT_ITEM->number.value != value) {
						updateInfo = true;
						AUX_INFO_CURRENT_ITEM->number.value = value;
					}
				}
			}
			if (upb3_command(device, "PC", response, sizeof(response))) {
				char *pnt, *token = strtok_r(response, ":", &pnt);
				if ((token = strtok_r(NULL, ":", &pnt))) {
					double value = indigo_atod(token);
					if (X_AUX_AVERAGE_ITEM->number.value != value) {
						updateInfo = true;
						X_AUX_AVERAGE_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) {
					double value = indigo_atod(token);
					if (X_AUX_AMP_HOUR_ITEM->number.value != value) {
						updateInfo = true;
						X_AUX_AMP_HOUR_ITEM->number.value = value;
					}
				}
				if ((token = strtok_r(NULL, ":", &pnt))) {
					double value = indigo_atod(token);
					if (X_AUX_WATT_HOUR_ITEM->number.value != value) {
						updateInfo = true;
						X_AUX_WATT_HOUR_ITEM->number.value = value;
					}
				}
			}
			if (updatePowerOutletState) {
				AUX_POWER_OUTLET_STATE_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_POWER_OUTLET_STATE_PROPERTY, NULL);
			}
			if (updateWeather) {
				AUX_WEATHER_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_WEATHER_PROPERTY, NULL);
			}
			if (updateInfo) {
				AUX_INFO_PROPERTY->state = INDIGO_OK_STATE;
				indigo_update_property(device, AUX_INFO_PROPERTY, NULL);
			}
			indigo_reschedule_timer(device, 2, &PRIVATE_DATA->aux_timer);
		}
		attach {
			INFO_PROPERTY->count = 6;
			strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			DEVICE_PORT_PROPERTY->hidden = false;
			DEVICE_PORTS_PROPERTY->hidden = false;
			
			// TODO automatic port selection
		}
	}
	focuser {
		name = "Ultimate Powerbox 3 (focuser)";
		additional_instances = true;
		timer {
			char response[128];
			if (upb3_command(device, "ES", response, sizeof(response))) {
				double temp = indigo_atod(response + 3);
				if (FOCUSER_TEMPERATURE_ITEM->number.value != temp) {
					FOCUSER_TEMPERATURE_ITEM->number.value = temp;
					FOCUSER_TEMPERATURE_PROPERTY->state = INDIGO_OK_STATE;
					indigo_update_property(device, FOCUSER_TEMPERATURE_PROPERTY, NULL);
				}
			}
			bool update = false;
			if (upb3_command(device, "SP", response, sizeof(response))) {
				int pos = atoi(response + 3);
				if (FOCUSER_POSITION_ITEM->number.value != pos) {
					FOCUSER_POSITION_ITEM->number.value = pos;
					update = true;
				}
			}
			if (upb3_command(device, "SI", response, sizeof(response))) {
				if (response[3] == '0') {
					if (FOCUSER_POSITION_PROPERTY->state != INDIGO_OK_STATE) {
						FOCUSER_STEPS_PROPERTY->state = INDIGO_OK_STATE;
						FOCUSER_POSITION_PROPERTY->state = INDIGO_OK_STATE;
						update = true;
					}
				} else {
					if (FOCUSER_POSITION_PROPERTY->state != INDIGO_BUSY_STATE) {
						FOCUSER_POSITION_PROPERTY->state = INDIGO_BUSY_STATE;
						FOCUSER_STEPS_PROPERTY->state = INDIGO_BUSY_STATE;
						update = true;
					}
				}
			}
			if (update) {
				indigo_update_property(device, FOCUSER_POSITION_PROPERTY, NULL);
				indigo_update_property(device, FOCUSER_STEPS_PROPERTY, NULL);
			}
			indigo_reschedule_timer(device, 0.5, &PRIVATE_DATA->focuser_timer);
		}
		attach {
			INFO_PROPERTY->count = 6;
			strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			FOCUSER_BACKLASH_PROPERTY->hidden = false;
			FOCUSER_BACKLASH_ITEM->number.min = 0;
			FOCUSER_BACKLASH_ITEM->number.max = 9999;
			FOCUSER_BACKLASH_ITEM->number.target = FOCUSER_BACKLASH_ITEM->number.value = 100;
			FOCUSER_REVERSE_MOTION_PROPERTY->hidden = false;
			FOCUSER_TEMPERATURE_PROPERTY->hidden = false;
			FOCUSER_SPEED_ITEM->number.value = FOCUSER_SPEED_ITEM->number.target = 400;
			FOCUSER_SPEED_ITEM->number.min = 100;
			FOCUSER_SPEED_ITEM->number.max = 1000;
			FOCUSER_SPEED_ITEM->number.step = 1;
			FOCUSER_STEPS_ITEM->number.min = 1;
			FOCUSER_STEPS_ITEM->number.max = 9999999;
			FOCUSER_STEPS_ITEM->number.step = 1;
			FOCUSER_ON_POSITION_SET_PROPERTY->hidden = false;
			FOCUSER_POSITION_ITEM->number.min = 0;
			FOCUSER_POSITION_ITEM->number.max = 9999999;
			FOCUSER_POSITION_ITEM->number.step = 1;
		}
	}
	define {
		#define POWERBOX_GROUP "Powerbox"
	}
	data {
		indigo_uni_handle *handle;
	}
	code {
		static bool upb3_command(indigo_device *device, char *command, char *response, int max) {
			if (indigo_uni_discard(PRIVATE_DATA->handle) >= 0) {
				if (indigo_uni_printf(PRIVATE_DATA->handle, "%s\n", command) > 0) {
					if (indigo_uni_read_section(PRIVATE_DATA->handle, response, max, "\n", "\r\n", INDIGO_DELAY(1)) > 0) {
						return true;
					}
				}
			}
			return false;
		}
		
		static void upb3_open(indigo_device *device) {
			char response[128];
			PRIVATE_DATA->handle = indigo_uni_open_serial_with_speed(DEVICE_PORT_ITEM->text.value, 115200, INDIGO_LOG_DEBUG);
			if (PRIVATE_DATA->handle != NULL) {
				int attempt = 0;
				while (true) {
					if (upb3_command(device, "P#", response, sizeof(response))) {
						if (!strncmp(response, "UPBv3_", 6)) {
							INDIGO_DRIVER_LOG(DRIVER_NAME, "Connected to %s %s", response, DEVICE_PORT_ITEM->text.value);
							PRIVATE_DATA->version = 3;
							if (upb_command(device, "PV", response, sizeof(response))) {
								strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "PeagasusAstro UPBv3");
								strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, response + 3);
								indigo_update_property(device, INFO_PROPERTY, NULL);
							}
							break;
						} else {
							indigo_uni_close(&PRIVATE_DATA->handle);
						}
					}
					if (attempt++ == 3) {
						INDIGO_DRIVER_ERROR(DRIVER_NAME, "UPB not detected");
						break;
					}
					INDIGO_DRIVER_ERROR(DRIVER_NAME, "UPB not detected - retrying in 1 second...");
					indigo_sleep(1);
				}
			}
		}
		
		static void upb3_close(indigo_device *device) {
			strcpy(INFO_DEVICE_MODEL_ITEM->text.value, "Unknown");
			strcpy(INFO_DEVICE_FW_REVISION_ITEM->text.value, "Unknown");
			indigo_update_property(device, INFO_PROPERTY, NULL);
			if (PRIVATE_DATA->handle != NULL) {
				upb3_command(device, "PL:0", response, sizeof(response));
				INDIGO_DRIVER_LOG(DRIVER_NAME, "Disconnected");
				indigo_uni_close(&PRIVATE_DATA->handle);
			}
		}
	}
}
